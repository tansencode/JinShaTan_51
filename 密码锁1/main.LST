C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          *******************************************************************************
   3          *                     《手把手教你学51单片机(C语言版)》
   4          *                    配套 KST-51 单片机开发板 示例源代码
   5          *
   6          *         (c) 版权所有 2014 金沙滩工作室/清华大学出版社 保留所有权利
   7          *                 获取更多资料请访问：http://www.kingst.org
   8          *
   9          * 文件名：main.c
  10          * 描  述：第14章 作业题4 密码锁示例
  11          * 版本号：v1.0.0
  12          * 备  注：
  13          * 1、用0～9的数字键输入密码，允许的密码最大位数由PSW_MAX_LEN宏定义给出
  14          * 2、用户设定的密码由EEPROM保存，并且用“累加和”校验来保证数据的有效性
  15          * 3、程序首次运行时EEPROM中的数据无效，此时会提示“设置密码”
  16          * 4、设置密码时需要用户输入两次相同的密码，以保证设置成功，设置后密码自动保存
  17          * 5、两次输入密码不相同时，将导致密码设置失败，按回车键重新设置
  18          * 6、密码设置成功后，每次开机都会要求用户输入密码，用户键入密码后，按回车键，
  19               系统将键入的密码与EEPROM中保存的密码做对比，相同则系统解锁，否则继续锁定
  20          * 7、密码输入错误系统锁定时，按回车键可以重新开始输入密码
  21          * 8、密码输入正确系统解锁时，按回车键可以进入修改密码的操作
  22          * 9、当忘记密码时，可通过修改PSW_MAX_LEN或PSW_SAVE_ADDR宏定义的值来重置密码
  23          *******************************************************************************
  24          */
  25          
  26          #include <reg52.h>
  27          
  28          #define PSW_MAX_LEN    6    //用宏定义出密码最大长度（最大不超过16）
  29          #define PSW_SAVE_ADDR  0x30  //用宏定义出密码在EEPROM中的保存地址
  30          
  31          sbit ADDR0 = P1^0;
  32          sbit ADDR1 = P1^1;
  33          sbit ADDR2 = P1^2;
  34          sbit ADDR3 = P1^3;
  35          sbit ENLED = P1^4;
  36          
  37          unsigned char code LedChar[] = { //数码管显示字符转换表
  38          0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
  39          0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
  40          };
  41          unsigned char LedBuff[6] = { //数码管显示缓冲区
  42          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  43          };
  44          
  45          unsigned char status;  //系统状态字：0-输入密码，1-设置密码，2-设置密码确认，
  46                                 //3-密码设置失败，4-输入的密码正确，5-输入的密码错误
  47          unsigned char PswCnt;  //当前输入密码位数的计数器
  48          unsigned char pdata PswSet[PSW_MAX_LEN];   //已设定的密码数据
  49          unsigned char pdata PswBuf1[PSW_MAX_LEN];  //密码输入缓冲区1
  50          unsigned char pdata PswBuf2[PSW_MAX_LEN];  //密码输入缓冲区2
  51          
  52          unsigned char T0RH = 0;  //T0重载值的高字节
  53          unsigned char T0RL = 0;  //T0重载值的低字节
  54          
  55          extern void KeyScan();
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 2   

  56          extern void KeyDriver();
  57          extern void InitLcd1602();
  58          extern void LcdClearScreen();
  59          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  60          extern void E2Read(unsigned char *buf, unsigned char addr, unsigned char len);
  61          extern void E2Write(unsigned char *buf, unsigned char addr, unsigned char len);
  62          
  63          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len);
  64          void ConfigTimer0(unsigned int ms);
  65          bit  ReadPassword();
  66          
  67          void main()
  68          {
  69   1          EA = 1;           //开总中断
  70   1              ENLED = 0; //选择数码管进行显示
  71   1          ADDR3 = 1;
  72   1              TMOD = 0x01; //设置 T0 为模式 1
  73   1          TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  74   1          TL0 = 0x67;
  75   1          ET0 = 1; //使能 T0 中断
  76   1          TR0 = 1; //启动 T0
  77   1          ConfigTimer0(1);  //配置T0定时1ms
  78   1              LedBuff[0] = LedChar[0]; //上电显示 0
  79   1          InitLcd1602();    //初始化液晶
  80   1          if (ReadPassword())  //读取密码并判断是否有效
  81   1          {
  82   2              LcdShowStr(0, 0, "Enter Password");  //有效时提示输入密码
  83   2              status = 0;
  84   2          }
  85   1          else
  86   1          {
  87   2              LcdShowStr(0, 0, "Set Password");  //无效时提示设置密码
  88   2              status = 1;
  89   2          }
  90   1          FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
  91   1          FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
  92   1          PswCnt = 0;
  93   1          
  94   1          while (1)
  95   1          {
  96   2              KeyDriver();
  97   2          }
  98   1      }
  99          /* 将一个无符号长整型的数字显示到数码管上，num-待显示数字 */
 100          void ShowNumber(unsigned long num)
 101          {
 102   1      signed char i;
 103   1      unsigned char buf[6];
 104   1      for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
 105   1      {
 106   2      buf[i] = num % 10;
 107   2      num = num / 10;
 108   2      }
 109   1      for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
 110   1      {
 111   2      if (buf[i] == 0)
 112   2      LedBuff[i] = 0xFF;
 113   2      else
 114   2      break;
 115   2      }
 116   1      for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
 117   1      {
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 3   

 118   2      LedBuff[i] = LedChar[buf[i]];
 119   2      }
 120   1      }
 121          /* 数码管动态扫描刷新函数，需在定时中断中调用 */
 122          void LedScan()
 123          {
 124   1      static unsigned char i = 0; //动态扫描的索引
 125   1      P0 = 0xFF; //显示消隐
 126   1      switch (i)
 127   1      {
 128   2      case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 129   2      case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 130   2      case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 131   2      case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 132   2      case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 133   2      case 5: ADDR2=1; ADDR1=0; ADDR0=1; i=0; P0=LedBuff[5]; break;
 134   2      default: break;
 135   2      }
 136   1      }
 137          /* 将一段内存数据拷贝到另一处，dest-目的地址，src-源地址，len-数据长度 */
 138          void CopyMemory(unsigned char *dest, unsigned char *src, unsigned char len)
 139          {
 140   1          while (len--)
 141   1          {
 142   2              *dest++ = *src++;
 143   2          }
 144   1      }
 145          /* 用一个指定字节填充一段内存，dest-目的地址，byt-填充用字节，len-数据长度 */
 146          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len)
 147          {
 148   1          while (len--)
 149   1          {
 150   2              *dest++ = byt;
 151   2          }
 152   1      }
 153          /* 内存比较函数，比较两个指针所指向的内存数据是否相同，
 154             ptr1-待比较指针1，ptr2-待比较指针2，len-待比较长度
 155             返回值-两段内存数据完全相同时返回1，不同返回0 */
 156          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
 157          {
 158   1          while (len--)
 159   1          {
 160   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
 161   2              {
 162   3                  return 0;
 163   3              }
 164   2          }
 165   1          return 1;  //比较完全部长度数据都相等则返回1
 166   1      }
 167          /* 将一段数据按字节累加，返回获得的累加和，dat-数据指针，len-数据长度 */
 168          unsigned char GetChkSum(unsigned char *dat, unsigned char len)
 169          {
 170   1          unsigned char sum = 0;
 171   1          
 172   1          while (len--)
 173   1          {
 174   2              sum += *dat++;
 175   2          }
 176   1          return sum;
 177   1      }
 178          /* 从EEPROM中读取保存的密码数据，并对密码进行“累加和”校验，
 179             返回值-校验通过返回1，否则返回0 */
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 4   

 180          bit ReadPassword()
 181          {
 182   1          unsigned char sum;
 183   1          unsigned char buf[PSW_MAX_LEN+1];
 184   1          
 185   1          E2Read(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //读取密码数据和校验字节
 186   1          sum = GetChkSum(buf, PSW_MAX_LEN); //计算密码数据的累加和
 187   1          if (buf[PSW_MAX_LEN] == ~sum)      //校验通过，即密码有效时，拷贝密码
 188   1          {
 189   2              CopyMemory(PswSet, buf, PSW_MAX_LEN);
 190   2              return 1;
 191   2          }
 192   1          else  //密码数据无效时，缓冲区默认成全0
 193   1          {
 194   2              FillMemory(PswSet, '\0', PSW_MAX_LEN);
 195   2              return 0;
 196   2          }
 197   1      }
 198          /* 将当前的密码数据保存到EEPROM中，同时添加校验字节 */
 199          void SavePassword()
 200          {
 201   1          unsigned char buf[PSW_MAX_LEN+1];
 202   1          
 203   1          CopyMemory(buf, PswSet, PSW_MAX_LEN);  //复制密码数据到缓冲区中
 204   1          buf[PSW_MAX_LEN] = ~GetChkSum(buf, PSW_MAX_LEN);  //填充最后的累加和校验字节
 205   1          E2Write(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //将密码数据保存到EEPROM中
 206   1      }
 207          /* 在液晶上显示与当前输入密码位数相同的*，以指示当前输入的密码位数 */
 208          void ShowPswCnt()
 209          {
 210   1          unsigned char buf[PSW_MAX_LEN+1];
 211   1          
 212   1          FillMemory(buf, '*', PswCnt);
 213   1          FillMemory(buf+PswCnt, '\0', sizeof(buf)-PswCnt);
 214   1          LcdShowStr(0, 1, buf);
 215   1      }
 216          /* 数字键动作函数，keycode-数字按键的ASCII值 */
 217          void KeyNumAction(unsigned char keycode)
 218          {
 219   1          switch (status)
 220   1          {
 221   2              case 0: //输入密码状态时，将输入字符填充到PswBuf1
 222   2                  if (PswCnt < PSW_MAX_LEN)
 223   2                  {
 224   3                      PswBuf1[PswCnt] = keycode;
 225   3                      PswCnt++;
 226   3                      ShowPswCnt();
 227   3                  }
 228   2                  break;
 229   2              case 1: //设置密码状态时，将输入字符填充到PswBuf1
 230   2                  if (PswCnt < PSW_MAX_LEN)
 231   2                  {
 232   3                      PswBuf1[PswCnt] = keycode;
 233   3                      PswCnt++;
 234   3                      ShowPswCnt();
 235   3                  }
 236   2                  break;
 237   2              case 2: //设置密码确认状态时，将输入字符填充到PswBuf2
 238   2                  if (PswCnt < PSW_MAX_LEN)
 239   2                  {
 240   3                      PswBuf2[PswCnt] = keycode;
 241   3                      PswCnt++;
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 5   

 242   3                      ShowPswCnt();
 243   3                  }
 244   2                  break;
 245   2              default: //其它状态不予响应
 246   2                  break;
 247   2          }
 248   1      }
 249          /* 回车键动作函数 */
 250          void KeyEnterAction()
 251          {
 252   1          switch (status)
 253   1          {
 254   2              case 0: //检查输入的密码是否正确
 255   2                  LcdClearScreen();
 256   2                  if (CmpMemory(PswSet, PswBuf1, PSW_MAX_LEN))
 257   2                  {   //正确时显示解锁的提示
 258   3                      LcdShowStr(0, 0, "Password Correct");
 259   3                      LcdShowStr(0, 1, "system unlock");
 260   3                      status = 4;  //进入解锁状态
 261   3                  }
 262   2                  else
 263   2                  {   //错误时显示已锁定的提示
 264   3                      LcdShowStr(0, 0, "Password Wrong");
 265   3                      LcdShowStr(0, 1, "system locked");
 266   3                      status = 5;  //进入锁定状态
 267   3                  }
 268   2                  break;
 269   2              case 1: //进入密码设置的确认步骤，即再输入一次密码
 270   2                  LcdClearScreen();
 271   2                  LcdShowStr(0, 0, "Confirm Password");
 272   2                  PswCnt = 0;
 273   2                  status = 2;
 274   2                  break;
 275   2              case 2: //检查两次输入的密码是否一致
 276   2                  LcdClearScreen();
 277   2                  if (CmpMemory(PswBuf1, PswBuf2, PSW_MAX_LEN))
 278   2                  {   //一致时保存设置的密码
 279   3                      LcdShowStr(0, 0, "Enter Password");
 280   3                      CopyMemory(PswSet, PswBuf1, PSW_MAX_LEN);
 281   3                      SavePassword();
 282   3                      FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 283   3                      PswCnt = 0;
 284   3                      status = 0;  //进入密码输入状态
 285   3                  }
 286   2                  else
 287   2                  {   //不一致时提示密码设置失败
 288   3                      LcdShowStr(0, 0, "Confirm Password");
 289   3                      LcdShowStr(0, 1, "Failed");
 290   3                      status = 3;  //进入密码设置失败状态
 291   3                  }
 292   2                  break;
 293   2              case 3: //重新提示设置密码，进入密码设置状态
 294   2                  LcdClearScreen();
 295   2                  LcdShowStr(0, 0, "Set Password");
 296   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 297   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 298   2                  PswCnt = 0;
 299   2                  status = 1;
 300   2                  break;
 301   2              case 4: //重新设置即修改密码
 302   2                  LcdClearScreen();
 303   2                  LcdShowStr(0, 0, "Set Password");
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 6   

 304   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 305   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 306   2                  PswCnt = 0;
 307   2                  status = 1;
 308   2                  break;
 309   2              case 5: //重新输入密码
 310   2                  LcdClearScreen();
 311   2                  LcdShowStr(0, 0, "Enter Password");
 312   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 313   2                  PswCnt = 0;
 314   2                  status = 0;
 315   2                  break;
 316   2              default: //不予响应
 317   2                  break;
 318   2          }
 319   1      }
 320          /* Esc键动作函数 */
 321          void KeyEscAction()
 322          {
 323   1          switch (status)
 324   1          {
 325   2              case 0: //输入密码状态时，清空当前输入以重新开始
 326   2                  LcdClearScreen();
 327   2                  LcdShowStr(0, 0, "Enter Password");
 328   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 329   2                  PswCnt = 0;
 330   2                  break;
 331   2              case 1: //设置密码状态时，清空当前输入以重新开始
 332   2                  LcdClearScreen();
 333   2                  LcdShowStr(0, 0, "Set Password");
 334   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 335   2                  PswCnt = 0;
 336   2                  break;
 337   2              case 2: //设置密码确认状态时，清空输入并返回密码设置状态
 338   2                  LcdClearScreen();
 339   2                  LcdShowStr(0, 0, "Set Password");
 340   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 341   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 342   2                  PswCnt = 0;
 343   2                  status = 1;
 344   2                  break;
 345   2              default: //其它状态不予响应
 346   2                  break;
 347   2          }
 348   1      }
 349          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 350          void KeyAction(unsigned char keycode)
 351          {
 352   1          static unsigned long num=0; //用于保存输入的数
 353   1          if  ((keycode>='0') && (keycode<='9'))  //输入字符
 354   1          {
 355   2              KeyNumAction(keycode);
 356   2                      num = (num*10)+(keycode-0x30); //整体十进制左移，新数字进入个位
 357   2                      ShowNumber(num); //运算结果显示到数码管
 358   2          }
 359   1          else if (keycode == 0x0D)  //回车键
 360   1          {
 361   2              KeyEnterAction();
 362   2          }
 363   1          else if (keycode == 0x1B)  //Esc键
 364   1          {
 365   2              KeyEscAction();
C51 COMPILER V9.01   MAIN                                                                  05/01/2018 23:58:35 PAGE 7   

 366   2          }
 367   1      }
 368          /* 配置并启动T0，ms-T0定时时间 */
 369          void ConfigTimer0(unsigned int ms)
 370          {
 371   1          unsigned long tmp;  //临时变量
 372   1          
 373   1          tmp = 11059200 / 12;      //定时器计数频率
 374   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 375   1          tmp = 65536 - tmp;        //计算定时器重载值
 376   1          tmp = tmp + 28;           //补偿中断响应延时造成的误差
 377   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 378   1          T0RL = (unsigned char)tmp;
 379   1          TMOD &= 0xF0;   //清零T0的控制位
 380   1          TMOD |= 0x01;   //配置T0为模式1
 381   1          TH0 = T0RH;     //加载T0重载值
 382   1          TL0 = T0RL;
 383   1          ET0 = 1;        //使能T0中断
 384   1          TR0 = 1;        //启动T0
 385   1      }
 386          /* T0中断服务函数，执行按键扫描 */
 387          void InterruptTimer0() interrupt 1
 388          {
 389   1          TH0 = T0RH;  //重新加载重载值
 390   1          TL0 = T0RL;
 391   1              LedScan(); //调用数码管显示扫描函数
 392   1          KeyScan();   //按键扫描
 393   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1364    ----
   CONSTANT SIZE    =    128    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     18    ----
   DATA SIZE        =     15      60
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
