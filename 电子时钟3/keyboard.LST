C51 COMPILER V9.01   KEYBOARD                                                              05/03/2018 17:08:03 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN keyboard.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE keyboard.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #define  _KEY_BOARD_C
   3          
   4          const uint8 code KeyCodeMap[4][4] = {  //矩阵按键到标准键码的映射表
*** ERROR C129 IN LINE 4 OF KEYBOARD.C: missing ';' before 'code'
   5              { '1',  '2',  '3', 0x26 },  //数字键1、数字键2、数字键3、向上键
   6              { '4',  '5',  '6', 0x25 },  //数字键4、数字键5、数字键6、向左键
   7              { '7',  '8',  '9', 0x28 },  //数字键7、数字键8、数字键9、向下键
   8              { '0', 0x1B, 0x0D, 0x27 }   //数字键0、ESC键、  回车键、 向右键
   9          };
  10          uint8 pdata KeySta[4][4] = {  //全部矩阵按键的当前状态
  11              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  12          };
  13          
  14          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  15          void KeyDriver()
  16          {
  17              uint8 i, j;
  18              static uint8 pdata backup[4][4] = {  //按键值备份，保存前一次的值
  19                  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  20              };
  21              
  22              for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
  23              {
  24                  for (j=0; j<4; j++)
  25                  {
  26                      if (backup[i][j] != KeySta[i][j])    //检测按键动作
  27                      {
  28                          if (backup[i][j] != 0)           //按键按下时执行动作
  29                          {
  30                              KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  31                          }
  32                          backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
  33                      }
  34                  }
  35              }
  36          }
  37          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
  38          void KeyScan()
  39          {
  40              uint8 i;
  41              static uint8 keyout = 0;   //矩阵按键扫描输出索引
  42              static uint8 keybuf[4][4] = {  //矩阵按键扫描缓冲区
  43                  {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
  44                  {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
  45              };
  46          
  47              //将一行的4个按键值移入缓冲区
  48              keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  49              keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  50              keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  51              keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  52              //消抖后更新按键状态
  53              for (i=0; i<4; i++)  //每行4个按键，所以循环4次
  54              {
C51 COMPILER V9.01   KEYBOARD                                                              05/03/2018 17:08:03 PAGE 2   

  55                  if ((keybuf[keyout][i] & 0x0F) == 0x00)
  56                  {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
  57                      KeySta[keyout][i] = 0;
  58                  }
  59                  else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  60                  {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
  61                      KeySta[keyout][i] = 1;
  62                  }
  63              }
  64              //执行下一次的扫描输出
  65              keyout++;        //输出索引递增
  66              keyout &= 0x03;  //索引值加到4即归零
  67              switch (keyout)  //根据索引值，释放当前输出引脚，拉低下次的输出引脚
  68              {
  69                  case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  70                  case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  71                  case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  72                  case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  73                  default: break;
  74              }
  75          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
