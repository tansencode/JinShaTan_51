C51 COMPILER V9.01   LED                                                                   05/03/2018 17:08:04 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN LED.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE LED.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #define  _LED_BUZZER_C
   3          
   4          uint8 code LedChar[] = {  //数码管显示字符转换表
*** ERROR C129 IN LINE 4 OF LED.C: missing ';' before 'code'
   5              0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
   6              0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
   7          };
   8          
   9          bit staBuzzer = 0; //蜂鸣器状态控制位，1-鸣叫、0-关闭
  10          struct sLedBuff ledBuff; //LED显示缓冲区，默认初值全0，正好达到上电全亮的效果
  11          
  12          /* LED初始化函数，初始化IO、配置定时器 */
  13          void InitLed()
  14          {
  15              //初始化IO口
  16              P0 = 0xFF;
  17              ENLED = 0;
  18              //配置T2作为动态扫描定时
  19              T2CON = 0x00;  //配置T2工作在16位自动重载定时器模式
  20              RCAP2H = ((65536-SYS_MCLK/1500)>>8);  //配置重载值，每秒产生1500次中断，
  21              RCAP2L = (65536-SYS_MCLK/1500);       //以使刷新率达到100Hz无闪烁的效果
  22              TH2 = RCAP2H;  //设置初值等于重载值
  23              TL2 = RCAP2L;
  24              ET2 = 1;       //使能T2中断
  25              PT2 = 1;       //设置T2中断为高优先级
  26              TR2 = 1;       //启动T2
  27          }
  28          /* 流水灯实现函数，间隔调用实现流动效果 */
  29          void FlowingLight()
  30          {
  31              static uint8 i = 0;
  32              const uint8 code tab[] = {  //流动表
  33                  0x7F, 0x3F, 0x1F, 0x0F, 0x87, 0xC3, 0xE1, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF
  34              };
  35              
  36              ledBuff.alone = tab[i];   //表中对应值送到独立LED的显示缓冲区
  37              if (i < (sizeof(tab)-1))  //索引递增循环，遍历整个流动表
  38                  i++;
  39              else
  40                  i = 0;
  41          }
  42          /* 数码管上显示一位数字，index-数码管位索引(从右到左对应0～5)，
  43          **     num-待显示的数字，point-代表是否显示此位上的小数点 */
  44          void ShowLedNumber(uint8 index, uint8 num, uint8 point)
  45          {
  46              ledBuff.number[index] = LedChar[num];  //输入数字转换为数码管字符0～F
  47              if (point != 0)
  48              {
  49                  ledBuff.number[index] &= 0x7F;  //point不为0时点亮当前位的小数点
  50              }
  51          }
  52          /* 点阵上显示一帧图片，ptr-待显示图片指针 */
  53          void ShowLedArray(uint8 *ptr)
  54          {
C51 COMPILER V9.01   LED                                                                   05/03/2018 17:08:04 PAGE 2   

  55              uint8 i;
  56              
  57              for (i=0; i<sizeof(ledBuff.array); i++)
  58              {
  59                  ledBuff.array[i] = *ptr++;
  60              }
  61          }
  62          /* T2中断服务函数，LED动态扫描、蜂鸣器控制 */
  63          void InterruptTimer2() interrupt 5
  64          {
  65              static uint8 i = 0;  //LED位选索引
  66              
  67              TF2 = 0;  //清零T2中断标志
  68              //全部LED动态扫描显示
  69              if (ENLED == 0)  //LED使能时才进行动态扫描
  70              {
  71                  P0 = 0xFF;                       //关闭所有段选位，显示消隐
  72                  P1 = (P1 & 0xF0) | i;            //位选索引值赋值到P1口低4位
  73                  P0 = *((uint8 data*)&ledBuff+i); //缓冲区中索引位置的数据送到P0口
  74                  if (i < (sizeof(ledBuff)-1))     //索引递增循环，遍历整个缓冲区
  75                      i++;
  76                  else
  77                      i = 0;
  78              }
  79              //由蜂鸣器状态位控制蜂鸣器
  80              if (staBuzzer == 1)
  81                  BUZZER = ~BUZZER;  //蜂鸣器鸣叫
  82              else
  83                  BUZZER = 1;        //蜂鸣器静音
  84          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
