C51 COMPILER V9.01   DS1302                                                                05/03/2018 16:45:54 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN DS1302.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE DS1302.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          sbit DS1302_CE = P1^7;
   3          sbit DS1302_CK = P3^5;
   4          sbit DS1302_IO = P3^4;
   5          struct sTime { //日期时间结构体定义
   6          unsigned int year; //年
   7          unsigned char mon; //月
   8          unsigned char day; //日
   9          unsigned char hour; //时
  10          unsigned char min; //分
  11          unsigned char sec; //秒
  12          unsigned char week; //星期
  13          };
  14          
  15           
  16          /* 发送一个字节到 DS1302 通信总线上 */
  17          void DS1302ByteWrite(unsigned char dat)
  18          {
  19   1      unsigned char mask;
  20   1      for (mask=0x01; mask!=0; mask<<=1) //低位在前，逐位移出
  21   1      {
  22   2      if ((mask&dat) != 0) //首先输出该位数据
  23   2      DS1302_IO = 1;
  24   2      else
  25   2      DS1302_IO = 0;
  26   2      DS1302_CK = 1; //然后拉高时钟
  27   2      DS1302_CK = 0; //再拉低时钟，完成一个位的操作
  28   2      }
  29   1      DS1302_IO = 1; //最后确保释放 IO 引脚
  30   1      }
  31          
  32          /* 由 DS1302 通信总线上读取一个字节 */
  33          unsigned char DS1302ByteRead()
  34          {
  35   1      unsigned char mask;
  36   1      unsigned char dat = 0;
  37   1      for (mask=0x01; mask!=0; mask<<=1) //低位在前，逐位读取
  38   1      {
  39   2      if (DS1302_IO != 0) //首先读取此时的 IO 引脚，并设置 dat 中的对应位
  40   2      {
  41   3      dat |= mask;
  42   3      }
  43   2      DS1302_CK = 1; //然后拉高时钟
  44   2      DS1302_CK = 0; //再拉低时钟，完成一个位的操作
  45   2      }
  46   1      return dat; //最后返回读到的字节数据
  47   1      }
  48          
  49          /* 用单次写操作向某一寄存器写入一个字节，reg-寄存器地址，dat-待写入字节 */
  50          void DS1302SingleWrite(unsigned char reg, unsigned char dat)
  51          {
  52   1      DS1302_CE = 1; //使能片选信号
  53   1      DS1302ByteWrite((reg<<1)|0x80); //发送写寄存器指令
  54   1      DS1302ByteWrite(dat); //写入字节数据
  55   1      DS1302_CE = 0; //除能片选信号
C51 COMPILER V9.01   DS1302                                                                05/03/2018 16:45:54 PAGE 2   

  56   1      }
  57          
  58          /* 用单次读操作从某一寄存器读取一个字节，reg-寄存器地址，返回值-读到的字节 */
  59          unsigned char DS1302SingleRead(unsigned char reg)
  60          {
  61   1      unsigned char dat;
  62   1      DS1302_CE = 1; //使能片选信号
  63   1      DS1302ByteWrite((reg<<1)|0x81); //发送读寄存器指令
  64   1      dat = DS1302ByteRead(); //读取字节数据
  65   1      DS1302_CE = 0; //除能片选信号
  66   1      return dat;
  67   1      }
  68          
  69          /* 用突发模式连续写入 8 个寄存器数据，dat-待写入数据指针 */
  70          void DS1302BurstWrite(unsigned char *dat)
  71          {
  72   1      unsigned char i;
  73   1      DS1302_CE = 1;
  74   1      DS1302ByteWrite(0xBE); //发送突发写寄存器指令
  75   1      for (i=0; i<8; i++) //连续写入 8 字节数据
  76   1      {
  77   2      DS1302ByteWrite(dat[i]);
  78   2      }
  79   1      DS1302_CE = 0;
  80   1      }
  81          
  82          /* 用突发模式连续读取 8 个寄存器的数据，dat-读取数据的接收指针 */
  83          void DS1302BurstRead(unsigned char *dat)
  84          {
  85   1      unsigned char i;
  86   1      DS1302_CE = 1;
  87   1      DS1302ByteWrite(0xBF); //发送突发读寄存器指令
  88   1      for (i=0; i<8; i++) //连续读取 8 个字节
  89   1      {
  90   2      dat[i] = DS1302ByteRead();
  91   2      }
  92   1      DS1302_CE = 0;
  93   1      }
  94          
  95          /* 获取实时时间，即读取 DS1302 当前时间并转换为时间结构体格式 */
  96          void GetRealTime(struct sTime *time)
  97          {
  98   1      unsigned char buf[8];
  99   1      DS1302BurstRead(buf);
 100   1      time->year = buf[6] + 0x2000;
 101   1      time->mon = buf[4];
 102   1      time->day = buf[3];
 103   1      time->hour = buf[2];
 104   1      time->min = buf[1];
 105   1      time->sec = buf[0];
 106   1      time->week = buf[5];
 107   1      }
 108          
 109          /* 设定实时时间，时间结构体格式的设定时间转换为数组并写入 DS1302 */
 110          void SetRealTime(struct sTime *time)
 111          {
 112   1      unsigned char buf[8];
 113   1      buf[7] = 0;
 114   1      buf[6] = time->year;
 115   1      buf[5] = time->week;
 116   1      buf[4] = time->mon;
 117   1      buf[3] = time->day;
C51 COMPILER V9.01   DS1302                                                                05/03/2018 16:45:54 PAGE 3   

 118   1      buf[2] = time->hour;
 119   1      buf[1] = time->min;
 120   1      buf[0] = time->sec;
 121   1      DS1302BurstWrite(buf);
 122   1      }
 123          
 124          /* DS1302 初始化，如发生掉电则重新设置初始时间 */
 125          void InitDS1302()
 126          {
 127   1      unsigned char dat;
 128   1      struct sTime code InitTime[] = { //2013 年 10 月 8 日 12:30:00 星期二
 129   1      0x2018,0x04,0x26, 0x16,0x55,0x00, 0x04
 130   1      };
 131   1      DS1302_CE = 0; //初始化 DS1302 通信引脚
 132   1      DS1302_CK = 0;
 133   1      
 134   1      //dat = DS1302SingleRead(0); //读取秒寄存器
 135   1      //if ((dat & 0x80) != 0) //由秒寄存器最高位 CH 的值判断 DS1302 是否已停止
 136   1      
 137   1      DS1302SingleWrite(7, 0x00); //撤销写保护以允许写入数据
 138   1      SetRealTime(&InitTime); //设置 DS1302 为默认的初始时间
 139   1      
 140   1      }
*** WARNING C280 IN LINE 127 OF DS1302.C: 'dat': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
