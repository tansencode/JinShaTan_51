C51 COMPILER V9.01   KEYBOARD                                                              05/18/2018 22:46:34 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN keyboard.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE keyboard.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          sbit KEY_IN_1  = P2^4;
   4          sbit KEY_IN_2  = P2^5;
   5          sbit KEY_IN_3  = P2^6;
   6          sbit KEY_IN_4  = P2^7;
   7          sbit KEY_OUT_1 = P2^3;
   8          sbit KEY_OUT_2 = P2^2;
   9          sbit KEY_OUT_3 = P2^1;
  10          sbit KEY_OUT_4 = P2^0;
  11          
  12          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  13              { '1',  '2',  '3', 0x26 }, //数字键1、数字键2、数字键3、向上键
  14              { '4',  '5',  '6', 0x25 }, //数字键4、数字键5、数字键6、向左键
  15              { '7',  '8',  '9', 0x28 }, //数字键7、数字键8、数字键9、向下键
  16              { '0', 0x1B, 0x0D, 0x27 }  //数字键0、ESC键、  回车键、 向右键
  17          };
  18          unsigned char pdata KeySta[4][4] = {  //全部矩阵按键的当前状态
  19              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  20          };
  21          
  22          extern void KeyAction(unsigned char keycode);
  23          
  24          
  25          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  26          void KeyDriver()
  27          {
  28   1          unsigned char i, j;
  29   1          static unsigned char pdata backup[4][4] = {  //按键值备份，保存前一次的值
  30   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  31   1          };
  32   1          
  33   1          for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
  34   1          {
  35   2              for (j=0; j<4; j++)
  36   2              {
  37   3                  if (backup[i][j] != KeySta[i][j])    //检测按键动作
  38   3                  {
  39   4                      if (backup[i][j] != 0)           //按键按下时执行动作
  40   4                      {
  41   5                          KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  42   5                      }
  43   4                      backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
  44   4                  }
  45   3              }
  46   2          }
  47   1      }
  48          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
  49          void KeyScan()
  50          {
  51   1          unsigned char i;
  52   1          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
  53   1          static unsigned char keybuf[4][4] = {  //矩阵按键扫描缓冲区
  54   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
  55   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
C51 COMPILER V9.01   KEYBOARD                                                              05/18/2018 22:46:34 PAGE 2   

  56   1          };
  57   1      
  58   1          //将一行的4个按键值移入缓冲区
  59   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  60   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  61   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  62   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  63   1          //消抖后更新按键状态
  64   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
  65   1          {
  66   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
  67   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
  68   3                  KeySta[keyout][i] = 0;
  69   3              }
  70   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  71   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
  72   3                  KeySta[keyout][i] = 1;
  73   3              }
  74   2          }
  75   1          //执行下一次的扫描输出
  76   1          keyout++;         //输出索引递增
  77   1          keyout &= 0x03;   //索引值加到4即归零
  78   1          switch (keyout)   //根据索引，释放当前输出引脚，拉低下次的输出引脚
  79   1          {
  80   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  81   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  82   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  83   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  84   2              default: break;
  85   2          }
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     32    ----
   DATA SIZE        =     17       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
