C51 COMPILER V9.01   OLED12864                                                             06/02/2018 23:00:33 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE OLED12864
OBJECT MODULE PLACED IN OLED12864.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE OLED12864.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          #include<codetab.h>
   4          #include<LQ12864.h>
   5          
   6          //sfr T2MOD=0xC9;
   7          sbit BUZZ  = P1^6;
   8          sbit ADDR3 = P1^3;
   9          sbit ENLED = P1^4;
  10          sbit KEY_IN_1  = P2^4;
  11          sbit KEY_IN_2  = P2^5;
  12          sbit KEY_IN_3  = P2^6;
  13          sbit KEY_IN_4  = P2^7;
  14          sbit KEY_OUT_1 = P2^3;
  15          sbit KEY_OUT_2 = P2^2;
  16          sbit KEY_OUT_3 = P2^1;
  17          sbit KEY_OUT_4 = P2^0;
  18          
  19          unsigned char code LedChar[] = {  //数码管显示字符转换表
  20              0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
  21              0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
  22          };
  23          unsigned char LedBuff[6] = {  //数码管显示缓冲区
  24              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  25          };
  26          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  27              { 0x31, 0x32, 0x33, 0x26 }, //数字键1、数字键2、数字键3、向上键
  28              { 0x34, 0x35, 0x36, 0x25 }, //数字键4、数字键5、数字键6、向左键
  29              { 0x37, 0x38, 0x39, 0x28 }, //数字键7、数字键8、数字键9、向下键
  30              { 0x30, 0x1B, 0x0D, 0x27 }  //数字键0、ESC键、  回车键、 向右键
  31          };
  32          
  33          unsigned char KeySta[4][4] = {  //全部矩阵按键的当前状态
  34              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  35          };
  36          bit enBuzz = 0;     //蜂鸣器使能标志
  37          unsigned char T0RH = 0;  //T0重载值的高字节
  38          unsigned char T0RL = 0;  //T0重载值的低字节
  39          unsigned int  CountDown = 0;  
  40          static int m=0;
  41          
  42          void ConfigTimer0(unsigned int ms);
  43          void ShowNumber(unsigned long num);
  44          void KeyDriver();
  45          
  46          //设置计数器初数值，重用的内容都应该写成独立函数出来方便维护
  47          
  48          void main(void)
  49          {
  50   1              EA = 1;       //使能总中断
  51   1          ENLED = 0;    //选择数码管和独立LED
  52   1          ADDR3 = 1;
  53   1          ConfigTimer0(1);  //配置T0定时1ms
  54   1          ShowNumber(0);    //上电显示0
  55   1              /*T2MOD = 0x00; //设置 T2 为模式 0
C51 COMPILER V9.01   OLED12864                                                             06/02/2018 23:00:33 PAGE 2   

  56   1          T2CON=0x00;
  57   1          TH2 = 0xFC; //为 T2 赋初值 0xFC67，定时 1ms
  58   1          TL2 = 0x67;
  59   1          RCAP2H=0xFC;
  60   1          RCAP2L=0x67;
  61   1          ET2 = 1; //使能 T2 中断
  62   1          TR2 = 1; //启动 T2  */
  63   1              OLED_Init(); //OLED初始化
  64   1              while(1)
  65   1              {
  66   2                  OLED_P8x16Str(0,0,"munu");//第一行 -- 8x16的显示单元显示ASCII码
  67   2                  OLED_P8x16Str(0,2,"counts");
  68   2                  OLED_P8x16Str(0,4,"bell");
  69   2                      KeyDriver();  //调用按键驱动函数
  70   2              }
  71   1      }
  72          
  73          /* 配置并启动T0，ms-T0定时时间 */
  74          void ConfigTimer0(unsigned int ms)
  75          {
  76   1          unsigned long tmp;  //临时变量
  77   1          
  78   1          tmp = 11059200 / 12;      //定时器计数频率
  79   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
  80   1          tmp = 65536 - tmp;        //计算定时器重载值
  81   1          tmp = tmp + 28;           //补偿中断响应延时造成的误差
  82   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
  83   1          T0RL = (unsigned char)tmp;
  84   1          TMOD &= 0xF0;   //清零T0的控制位
  85   1          TMOD |= 0x01;   //配置T0为模式1
  86   1          TH0 = T0RH;     //加载T0重载值
  87   1          TL0 = T0RL;
  88   1          ET0 = 1;        //使能T0中断
  89   1          TR0 = 1;        //启动T0
  90   1      }
  91          /* 将一个无符号长整型的数字显示到数码管上，num-待显示数字 */
  92          void ShowNumber(unsigned long num)
  93          {
  94   1          signed char i;
  95   1          unsigned char buf[6];
  96   1          
  97   1          for (i=0; i<6; i++)   //把长整型数转换为6位十进制的数组
  98   1          {
  99   2              buf[i] = num % 10;
 100   2              num = num / 10;
 101   2          }
 102   1          for (i=5; i>=1; i--)  //从最高位起，遇到0转换为空格，遇到非0则退出循环
 103   1          {
 104   2              if (buf[i] == 0)
 105   2                  LedBuff[i] = 0xFF;
 106   2              else
 107   2                  break;
 108   2          }
 109   1          for ( ; i>=0; i--)    //剩余低位都如实转换为数码管显示字符
 110   1          {
 111   2              LedBuff[i] = LedChar[buf[i]];
 112   2          }
 113   1      }
 114          
 115          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 116          void KeyAction(unsigned char keycode)  //按键动作函数，根据键码执行相应动作
 117          {
C51 COMPILER V9.01   OLED12864                                                             06/02/2018 23:00:33 PAGE 3   

 118   1          if (keycode == 0x26)       //向上键，倒计时设定值递增
 119   1          {
 120   2                  m=1;
 121   2              OLED_P8x16Str(0,2,"COUNTS");
 122   2                      //      delay(4000);
 123   2                      enBuzz = 0;            //关闭蜂鸣器
 124   2          }
 125   1          else if (keycode == 0x28)  //向下键，倒计时设定值递减
 126   1          {
 127   2                  m=2;
 128   2              OLED_P8x16Str(0,4,"BELL");
 129   2              //delay(4000);
 130   2              
 131   2          }
 132   1          else if (keycode == 0x0D)  //回车键，启动倒计时
 133   1          {    
 134   2                   switch(m)
 135   2                       {
 136   3                              case 1: CountDown++;
 137   3                          ShowNumber(CountDown);
 138   3                                      //m=0;
 139   3                                              break;
 140   3                                  case 2:enBuzz=1;
 141   3                                         // m=0;
 142   3                                              break;
 143   3                                  default:
 144   3                                      break;
 145   3                         }
 146   2          }
 147   1          else if (keycode == 0x1B)  //Esc键，取消倒计时
 148   1          {
 149   2              enBuzz = 0;            //关闭蜂鸣器
 150   2              CountDown = 0;         //计数归零
 151   2              ShowNumber(CountDown);
 152   2          }
 153   1      }
 154          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 155          void KeyDriver()
 156          {
 157   1          unsigned char i, j;
 158   1          static unsigned char pdata backup[4][4] = {  //按键值备份，保存前一次的值
 159   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
 160   1          };
 161   1          for (i=0; i<4; i++)  //循环扫描4*4的矩阵按键
 162   1          {
 163   2              for (j=0; j<4; j++)
 164   2              {
 165   3                  if (backup[i][j] != KeySta[i][j])     //检测按键动作
 166   3                  {
 167   4                      if (backup[i][j] != 0)            //按键按下时执行动作
 168   4                      {
 169   5                          KeyAction(KeyCodeMap[i][j]);  //调用按键动作函数
 170   5                      }
 171   4                      backup[i][j] = KeySta[i][j];      //刷新前一次的备份值
 172   4                  }
 173   3              }
 174   2          }
 175   1      }
 176          /* 按键扫描函数，需在定时中断中调用 */
 177          void KeyScan()
 178          {
 179   1          unsigned char i;
C51 COMPILER V9.01   OLED12864                                                             06/02/2018 23:00:33 PAGE 4   

 180   1          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
 181   1          static unsigned char keybuf[4][4] = {  //矩阵按键扫描缓冲区
 182   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
 183   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
 184   1          };
 185   1      
 186   1          //将一行的4个按键值移入缓冲区
 187   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
 188   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 189   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 190   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 191   1          //消抖后更新按键状态
 192   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
 193   1          {
 194   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
 195   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
 196   3                  KeySta[keyout][i] = 0;
 197   3              }
 198   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
 199   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
 200   3                  KeySta[keyout][i] = 1;
 201   3              }
 202   2          }
 203   1          //执行下一次的扫描输出
 204   1          keyout++;        //输出索引递增
 205   1          keyout &= 0x03;  //索引值加到4即归零
 206   1          switch (keyout)  //根据索引，释放当前输出引脚，拉低下次的输出引脚
 207   1          {
 208   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 209   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
 210   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 211   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 212   2              default: break;
 213   2          }
 214   1      }
 215          /* LED动态扫描刷新函数，需在定时中断中调用 */
 216          void LedScan()
 217          {
 218   1          static unsigned char i = 0;  //动态扫描索引
 219   1          
 220   1          P0 = 0xFF;             //关闭所有段选位，显示消隐
 221   1          P1 = (P1 & 0xF8) | i;  //位选索引值赋值到P1口低3位
 222   1          P0 = LedBuff[i];       //缓冲区中索引位置的数据送到P0口
 223   1          if (i < 5)             //索引递增循环，遍历整个缓冲区
 224   1              i++;
 225   1          else
 226   1              i = 0;
 227   1      }
 228          /* T0中断服务函数，完成数码管、按键扫描与秒定时 */
 229          void InterruptTimer0() interrupt 1
 230          {
 231   1          TH0 = T0RH;   //重新加载重载值
 232   1          TL0 = T0RL;
 233   1              LedScan();   //LED扫描显示
 234   1          KeyScan();   //按键扫描
 235   1          if (enBuzz)   //蜂鸣器发声处理
 236   1              BUZZ = ~BUZZ;  //驱动蜂鸣器发声
 237   1          else
 238   1              BUZZ = 1;      //关闭蜂鸣器     */
 239   1          /*switch(m)
 240   1                       {
 241   1                              case 1:OLED_P8x16Str(0,2,"COUNTS");     
C51 COMPILER V9.01   OLED12864                                                             06/02/2018 23:00:33 PAGE 5   

 242   1                                      //m=0;
 243   1                                              break;
 244   1                                  case 2:     OLED_P8x16Str(0,4,"BELL");
 245   1                                         // m=0;
 246   1                                              break;
 247   1                                  default:
 248   1                                      break;
 249   1                         }  */
 250   1      }
 251          
 252          
 253          /* T2 中断服务函数 */
 254          /*void InterruptTimer2() interrupt 5
 255          {
 256                TF2=0;
 257               // LedScan();   //LED扫描显示
 258               // KeyScan();   //按键扫描
 259                if (enBuzz)   //蜂鸣器发声处理
 260                  BUZZ = ~BUZZ;  //驱动蜂鸣器发声
 261                else
 262                  BUZZ = 1;      //关闭蜂鸣器
 263                switch(m)
 264                           {
 265                                  case 1:OLED_P8x16Str(0,2,"COUNTS");     
 266                                          //m=0;
 267                                                  break;
 268                                      case 2:     OLED_P8x16Str(0,4,"BELL");
 269                                             // m=0;
 270                                                  break;
 271                                      default:
 272                                          break;
 273                             } 
 274          }  */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1579    ----
   CONSTANT SIZE    =   4181    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     16    ----
   DATA SIZE        =     46      47
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
