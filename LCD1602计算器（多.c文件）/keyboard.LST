C51 COMPILER V9.01   KEYBOARD                                                              04/18/2018 21:28:51 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN keyboard.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE keyboard.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          sbit KEY_IN_1 = P2^4;
   3          sbit KEY_IN_2 = P2^5;
   4          sbit KEY_IN_3 = P2^6;
   5          sbit KEY_IN_4 = P2^7;
   6          sbit KEY_OUT_1 = P2^3;
   7          sbit KEY_OUT_2 = P2^2;
   8          sbit KEY_OUT_3 = P2^1;
   9          sbit KEY_OUT_4 = P2^0;
  10          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  11          { '1', '2', '3', 0x26 }, //数字键 1、数字键 2、数字键 3、向上键
  12          { '4', '5', '6', 0x25 }, //数字键 4、数字键 5、数字键 6、向左键
  13          { '7', '8', '9', 0x28 }, //数字键 7、数字键 8、数字键 9、向下键
  14          { '0', 0x1B, 0x0D, 0x27 } //数字键 0、ESC 键、 回车键、 向右键
  15          };
  16          unsigned char pdata KeySta[4][4] = { //全部矩阵按键的当前状态
  17          {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
  18          };
  19          extern void KeyAction(unsigned char keycode);
  20          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  21          void KeyDriver()
  22          {
  23   1      unsigned char i, j;
  24   1      static unsigned char pdata backup[4][4] = { //按键值备份，保存前一次的值
  25   1      {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
  26   1      };
  27   1      for (i=0; i<4; i++) //循环检测 4*4 的矩阵按键
  28   1      {
  29   2      for (j=0; j<4; j++)
  30   2      {
  31   3      if (backup[i][j] != KeySta[i][j]) //检测按键动作
  32   3      {
  33   4      if (backup[i][j] != 0) //按键按下时执行动作
  34   4      {
  35   5      KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  36   5      }
  37   4      backup[i][j] = KeySta[i][j]; //刷新前一次的备份值
  38   4      }
  39   3      }
  40   2      }
  41   1      }
  42          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔 1ms */
  43          void KeyScan()
  44          {
  45   1      unsigned char i;
  46   1      static unsigned char keyout = 0; //矩阵按键扫描输出索引
  47   1      static unsigned char keybuf[4][4] = { //矩阵按键扫描缓冲区
  48   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
  49   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}
  50   1      };
  51   1      //将一行的 4 个按键值移入缓冲区
  52   1      keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  53   1      keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  54   1      keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  55   1      keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
C51 COMPILER V9.01   KEYBOARD                                                              04/18/2018 21:28:51 PAGE 2   

  56   1      //消抖后更新按键状态
  57   1      for (i=0; i<4; i++) //每行 4 个按键，所以循环 4 次
  58   1      {
  59   2      if ((keybuf[keyout][i] & 0x0F) == 0x00)
  60   2      { //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
  61   3      KeySta[keyout][i] = 0;
  62   3      }
  63   2      else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  64   2      { //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
  65   3      KeySta[keyout][i] = 1;
  66   3      }
  67   2      }
  68   1      //执行下一次的扫描输出
  69   1      keyout++; //输出索引递增
  70   1      keyout &= 0x03; //索引值加到 4 即归零
  71   1      switch (keyout) //根据索引，释放当前输出引脚，拉低下次的输出引脚
  72   1      {
  73   2      case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  74   2      case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  75   2      case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  76   2      case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  77   2      default: break;
  78   2      }
  79   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     32    ----
   DATA SIZE        =     17       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
