C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          unsigned char T0RH = 0;  //T0重载值的高字节
   4          unsigned char T0RL = 0;  //T0重载值的低字节
   5          
   6          sbit BUZZ=P1^6;
   7          bit flagBuzzOn=0;
   8          unsigned char step = 0;  //操作步骤
   9          unsigned char oprt = 0;  //运算类型
  10          static signed long num1 = 0;    //操作数1
  11          static signed long num2 = 0;    //操作数2
  12          static signed long result = 0;  //运算结果
  13          
  14          extern void InitLcd1602();
  15          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  16          extern void LcdAreaClear(unsigned char x, unsigned char y, unsigned char len);
  17          extern void LcdFullClear();
  18          extern bit irflag;
  19          extern unsigned char ircode[16];
  20          extern void InitInfrared();
  21          void NumKeyAction1();
  22          void ConfigTimer0(unsigned int ms);
  23          void OprtKeyAction(unsigned char type);
  24          void Reset();
  25          void GetResult();
  26          void NumKeyAction(unsigned char n);
  27          void NumKeyAction2();
  28          static unsigned char str[16];
  29          void main()
  30          {
  31   1          static signed int i=0;
  32   1          EA = 1;      //开总中断
  33   1          InitInfrared();   //初始化红外功能
  34   1          ConfigTimer0(2);  //配置T0定时2ms
  35   1          InitLcd1602();    //初始化液晶
  36   1          LcdShowStr(15, 1, "0");  //初始显示一个数字0
  37   1          while (1)
  38   1          {
  39   2              if (irflag)  //接收到红外数据时刷新显示
  40   2              {
  41   3                  irflag = 0;
  42   3                  // if ((ircode[2] >= '0')&&(ircode[2] <= '9'))   //0x09为+键码，正转1圈
  43   3                      //      {
  44   3                    //    NumKeyAction(ircode[2] - '0');
  45   3                  //}
  46   3                              if (ircode[2] == 0x16) //  0
  47   3                              {
  48   4                                 //num=ircode[2];
  49   4                                 NumKeyAction(0x00);
  50   4                              }
  51   3                               else if (ircode[2] == 0x0C) //  1
  52   3                              {
  53   4                                 //num=0;
  54   4                                 NumKeyAction(0x01);
  55   4                              }
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 2   

  56   3                              else if (ircode[2] == 0x18)       //  2
  57   3                              {
  58   4                                 NumKeyAction(0x02);
  59   4                              }
  60   3                                      else if (ircode[2] == 0x5E)             //  3
  61   3                              {
  62   4                                 NumKeyAction(0x03);
  63   4                              }
  64   3                                      else if (ircode[2] == 0x08)             //  4
  65   3                              {
  66   4                                 NumKeyAction(0x04);
  67   4                              }
  68   3                                      else if (ircode[2] == 0x1C)        //  5
  69   3                              {
  70   4                                 NumKeyAction(0x05);
  71   4                              }
  72   3                                      else if (ircode[2] == 0x5A)        //  6
  73   3                              {
  74   4                                 NumKeyAction(0x06);
  75   4                              }
  76   3                                      else if (ircode[2] == 0x42)             //  7
  77   3                              {
  78   4                                 NumKeyAction(0x07);
  79   4                              }
  80   3                                      else if (ircode[2] == 0x52)       //  8
  81   3                              {
  82   4                                 NumKeyAction(0x08);
  83   4                              }
  84   3                              else if (ircode[2] == 0x4A)             //  9
  85   3                              {
  86   4                                 NumKeyAction(0x09);
  87   4                              }
  88   3                              else if (ircode[2] == 0x07)             //  -1
  89   3                              {
  90   4                                      //OprtKeyAction(1);
  91   4                                      //NumKeyAction(-0x01);
  92   4                                       //LcdShowStr(16-len, 1, );
  93   4                                       NumKeyAction2();
  94   4                              }
  95   3                              else if(ircode[2] == 0x09)      // '+' ，加号
  96   3                  {
  97   4                       OprtKeyAction(0);
  98   4                  }
  99   3                  else if (ircode[2] == 0x15)  //     '-' ，减号
 100   3                  {
 101   4                      OprtKeyAction(1);
 102   4                  }
 103   3                              else if (ircode[2] == 0x0D)  // '*'     ，乘号
 104   3                  {
 105   4                      OprtKeyAction(2);
 106   4                              }
 107   3                              else if (ircode[2] == 0x19)  // '/'      ，除号
 108   3                  {
 109   4                      OprtKeyAction(3);
 110   4                              }
 111   3      
 112   3                      else if (ircode[2] == 0x43)   //回车键，得出结果
 113   3                  {
 114   4                      GetResult();
 115   4                              }
 116   3                              else if(ircode[2] == 0x44)
 117   3                              {
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 3   

 118   4                                  NumKeyAction1();
 119   4                              }        
 120   3                              else if ((ircode[2] == 0x40)|| (ircode[2] == 0x45)) //Ens清零键
 121   3                  {
 122   4                     Reset();
 123   4                     LcdShowStr(15, 1, "0");
 124   4                              }
 125   3                          else if (ircode[2] == 0x46)  //  蜂鸣器开启
 126   3                  {  
 127   4                                   flagBuzzOn=1;
 128   4                              }
 129   3                              else if (ircode[2] == 0x47)  //  蜂鸣器关闭
 130   3                  {  
 131   4                                   flagBuzzOn=0;
 132   4                              }
 133   3              }
 134   2          }
 135   1      }
*** WARNING C280 IN LINE 31 OF MAIN.C: 'i': unreferenced local variable
 136          
 137          /* 长整型数转换为字符串，str-字符串指针，dat-待转换数，返回值-字符串长度 */
 138          unsigned char LongToString(unsigned char *str, signed long dat)
 139          {
 140   1          signed char i = 0;
 141   1          unsigned char len = 0;
 142   1          unsigned char buf[16];
 143   1          
 144   1          if (dat < 0)  //如果为负数，首先取绝对值，并在指针上添加负号
 145   1          {
 146   2              dat = -dat;
 147   2              *str++ = '-';
 148   2              len++;
 149   2          }
 150   1          do {          //先转换为低位在前的十进制数组
 151   2              buf[i++] = dat % 10;
 152   2              dat /= 10;
 153   2          } while (dat > 0);
 154   1          len += i;     //i最后的值就是有效字符的个数
 155   1          while (i-- > 0)   //将数组值转换为ASCII码反向拷贝到接收指针上
 156   1          {
 157   2              *str++ = buf[i] + '0';
 158   2          }
 159   1          *str = '\0';  //添加字符串结束符
 160   1          
 161   1          return len;   //返回字符串长度
 162   1      }
 163          
 164          /* 显示运算符，显示位置y，运算符类型type */
 165          void ShowOprt(unsigned char y, unsigned char type)
 166          {
 167   1          switch (type)
 168   1          {
 169   2              case 0: LcdShowStr(0, y, "+"); break;  //0代表+
 170   2              case 1: LcdShowStr(0, y, "-"); break;  //1代表-
 171   2              case 2: LcdShowStr(0, y, "*"); break;  //2代表*
 172   2              case 3: LcdShowStr(0, y, "/"); break;  //3代表/
 173   2              default: break;
 174   2          }
 175   1      }
 176          /* 计算器复位，清零变量值，清除屏幕显示 */
 177          void Reset()
 178          {
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 4   

 179   1          num1 = 0;
 180   1          num2 = 0;
 181   1          step = 0;
 182   1          LcdFullClear();
 183   1      }
 184          /* 数字键动作函数，n-按键输入的数值 */
 185          void NumKeyAction(signed char n)
 186          {
 187   1          unsigned char len;
 188   1          //unsigned char str[16];
 189   1          
 190   1          if (step > 1)  //如计算已完成，则重新开始新的计算
 191   1          {
 192   2              Reset();
 193   2          }
 194   1          if (step == 0)  //输入第一操作数
 195   1          {
 196   2              num1 = num1*(10.0) + n;             //输入数值累加到原操作数上
 197   2              len = LongToString(str, num1);  //新数值转换为字符串
 198   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 199   2          }
 200   1          else            //输入第二操作数
 201   1          {
 202   2              num2 = num2*(10.0) + n;             //输入数值累加到原操作数上
 203   2              len = LongToString(str, num2);  //新数值转换为字符串
 204   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 205   2          }
 206   1      }
 207          
 208          void NumKeyAction1()
 209          {
 210   1          unsigned char len;
 211   1          //unsigned char str[16];
 212   1          
 213   1          if (step > 1)  //如计算已完成，则重新开始新的计算
 214   1          {
 215   2              Reset();
 216   2          }
 217   1          if (step == 0)  //输入第一操作数
 218   1          {
 219   2              num1 = num1/10;             //输入数值累加到原操作数上
 220   2              len = LongToString(str, num1);  //新数值转换为字符串
 221   2                       LcdAreaClear(1, 1, str);        //清除第二行中间的字符位
*** WARNING C214 IN LINE 221 OF MAIN.C: 'Argument': conversion: pointer to non-pointer
 222   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 223   2          }
 224   1          else            //输入第二操作数
 225   1          {
 226   2              num2 = num2/10;             //输入数值累加到原操作数上
 227   2              len = LongToString(str, num2);  //新数值转换为字符串
 228   2                       LcdAreaClear(1, 1,str);        //清除第二行中间的字符位
*** WARNING C214 IN LINE 228 OF MAIN.C: 'Argument': conversion: pointer to non-pointer
 229   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 230   2          }
 231   1      }
 232          
 233          void NumKeyAction2()
 234          {
 235   1          unsigned char len;
 236   1          //unsigned char str[16];
 237   1          
 238   1          if (step > 1)  //如计算已完成，则重新开始新的计算
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 5   

 239   1          {
 240   2              Reset();
 241   2          }
 242   1          if (step == 0)  //输入第一操作数
 243   1          {
 244   2              //num1 = num1/10;             //输入数值累加到原操作数上
 245   2              len = LongToString(str, num1);  //新数值转换为字符串
 246   2                      str[len++]='.';
 247   2                       LcdAreaClear(1, 1, str);        //清除第二行中间的字符位
*** WARNING C214 IN LINE 247 OF MAIN.C: 'Argument': conversion: pointer to non-pointer
 248   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 249   2          }
 250   1          else            //输入第二操作数
 251   1          {
 252   2              //num2 = num2/10;             //输入数值累加到原操作数上
 253   2              len = LongToString(str, num2);  //新数值转换为字符串
 254   2                      str[len++]='.';
 255   2                       LcdAreaClear(1, 1,str);        //清除第二行中间的字符位
*** WARNING C214 IN LINE 255 OF MAIN.C: 'Argument': conversion: pointer to non-pointer
 256   2              LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 257   2          }
 258   1      }
 259          
 260          
 261          /*unsigned char LongToString1(unsigned char *str, signed long dat)
 262          {
 263              signed char i = 0;
 264              unsigned char len = 0;
 265              unsigned char buf[16];
 266              
 267              if (dat < 0)  //如果为负数，首先取绝对值，并在指针上添加负号
 268              {
 269                  dat = -dat;
 270                  *str++ = '-';
 271                  len++;
 272              }  
 273              return len;   //返回字符串长度
 274          }                */
 275          
 276          /*void NumKeyAction1(signed char n)
 277          {
 278              unsigned char len;
 279              unsigned char str[16];
 280              static unsigned int i=0;
 281              if (step > 1)  //如计算已完成，则重新开始新的计算
 282              {
 283                  Reset();
 284              }
 285              if (step == 0)  //输入第一操作数
 286              {
 287                      switch(i)
 288                          {
 289                          case 0:num1=n;break;
 290                          case 1:
 291                    num1 = num1*n;             //输入数值累加到原操作数上
 292                            break;
 293                          }
 294                  len = LongToString1(str, num1);  //新数值转换为字符串
 295                  LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 296              }
 297              else            //输入第二操作数
 298              {
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 6   

 299                  num2 = num2*10 + n;             //输入数值累加到原操作数上
 300                  len = LongToString1(str, num2);  //新数值转换为字符串
 301                  LcdShowStr(16-len, 1, str);     //显示到液晶第二行上
 302              }
 303          }                */
 304          
 305          /* 运算符按键动作函数，运算符类型type */
 306          void OprtKeyAction(unsigned char type)
 307          {
 308   1          unsigned char len;
 309   1          unsigned char str[16];
 310   1          
 311   1          if (step == 0)  //第二操作数尚未输入时响应，即不支持连续操作
 312   1          {
 313   2              len = LongToString(str, num1); //第一操作数转换为字符串
 314   2              LcdAreaClear(0, 0, 16-len);    //清除第一行左边的字符位
 315   2              LcdShowStr(16-len, 0, str);    //字符串靠右显示在第一行
 316   2              ShowOprt(1, type);             //在第二行显示操作符
 317   2              LcdAreaClear(1, 1, 14);        //清除第二行中间的字符位
 318   2              LcdShowStr(15, 1, "0");        //在第二行最右端显示0
 319   2              oprt = type;                   //记录操作类型
 320   2              step = 1;
 321   2          }
 322   1      }
 323          
 324          /* 计算结果函数 */
 325          void GetResult()
 326          {
 327   1          unsigned char len;
 328   1          unsigned char str[16];
 329   1          
 330   1          if (step == 1) //第二操作数已输入时才执行计算
 331   1          {
 332   2              step = 2;
 333   2              switch (oprt)  //根据运算符类型计算结果，未考虑溢出问题
 334   2              {
 335   3                  case 0: result = num1 + num2; break;
 336   3                  case 1: result = num1 - num2; break;
 337   3                  case 2: result = num1 * num2; break;
 338   3                  case 3: result = num1 / num2; break;
 339   3                  default: break;
 340   3              }
 341   2              len = LongToString(str, num2);  //原第二操作数和运算符显示到第一行
 342   2              ShowOprt(0, oprt);
 343   2              LcdAreaClear(1, 0, 16-1-len);
 344   2              LcdShowStr(16-len, 0, str);
 345   2              len = LongToString(str, result);  //计算结果和等号显示在第二行
 346   2              LcdShowStr(0, 1, "=");
 347   2              LcdAreaClear(1, 1, 16-1-len);
 348   2              LcdShowStr(16-len, 1, str);
 349   2          }
 350   1      }
 351          
 352          /* 步进电机启动函数，angle-需转过的角度 */
 353          /*void StartMotor(signed long angle)
 354          {
 355              //在计算前关闭中断，完成后再打开，以避免中断打断计算过程而造成错误
 356              EA = 0;
 357              beats = (angle * 4076) / 360; //实测为4076拍转动一圈
 358              EA = 1;
 359          }        */
 360          /* 步进电机停止函数 */
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 7   

 361          /*void StopMotor()
 362          {
 363              EA = 0;
 364              beats = 0;
 365              EA = 1;
 366          }  */
 367          /* 电机转动控制函数 */
 368          /*void TurnMotor()
 369          {
 370              unsigned char tmp;  //临时变量
 371              static unsigned char index = 0;  //节拍输出索引
 372              unsigned char code BeatCode[8] = {  //步进电机节拍对应的IO控制代码
 373                  0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 374              };
 375              
 376              if (beats != 0)  //节拍数不为0则产生一个驱动节拍
 377              {
 378                  if (beats > 0)  //节拍数大于0时正转
 379                  {
 380                      index++;               //正转时节拍输出索引递增
 381                      index = index & 0x07;  //用&操作实现到8归零
 382                      beats--;               //正转时节拍计数递减
 383                  }
 384                  else            //节拍数小于0时反转
 385                  {
 386                      index--;               //反转时节拍输出索引递减
 387                      index = index & 0x07;  //用&操作同样可以实现到-1时归7
 388                      beats++;               //反转时节拍计数递增
 389                  }
 390                  tmp = P1;                    //用tmp把P1口当前值暂存
 391                  tmp = tmp & 0xF0;            //用&操作清零低4位
 392                  tmp = tmp | BeatCode[index]; //用|操作把节拍代码写到低4位
 393                  P1  = tmp;                   //把低4位的节拍代码和高4位的原值送回P1
 394              }
 395              else  //节拍数为0则关闭电机所有的相
 396              {
 397                  P1 = P1 | 0x0F;
 398              }
 399          }        */
 400          /* 配置并启动T0，ms-T0定时时间 */
 401          void ConfigTimer0(unsigned int ms)
 402          {
 403   1          unsigned long tmp;  //临时变量
 404   1          
 405   1          tmp = 11059200 / 12;      //定时器计数频率
 406   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 407   1          tmp = 65536 - tmp;        //计算定时器重载值
 408   1          tmp = tmp + 13;           //补偿中断响应延时造成的误差
 409   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 410   1          T0RL = (unsigned char)tmp;
 411   1          TMOD &= 0xF0;   //清零T0的控制位
 412   1          TMOD |= 0x01;   //配置T0为模式1
 413   1          TH0 = T0RH;     //加载T0重载值
 414   1          TL0 = T0RL;
 415   1          ET0 = 1;        //使能T0中断
 416   1          TR0 = 1;        //启动T0
 417   1      }
 418          /* T0中断服务函数，执行数码管扫描显示 */
 419          void InterruptTimer0() interrupt 1
 420          {
 421   1          TH0 = T0RH;  //重新加载重载值
 422   1          TL0 = T0RL;
C51 COMPILER V9.01   MAIN                                                                  05/31/2018 16:20:18 PAGE 8   

 423   1              if(flagBuzzOn)
 424   1                 BUZZ=~BUZZ;
 425   1              else
 426   1                BUZZ=1;
 427   1          //TurnMotor(); //执行电机驱动
 428   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1317    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34      69
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
