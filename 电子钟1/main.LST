C51 COMPILER V9.01   MAIN                                                                  04/26/2018 16:53:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          struct sTime { //日期时间结构体定义
   3          unsigned int year;
   4          unsigned char mon;
   5          unsigned char day;
   6          unsigned char hour;
   7          unsigned char min;
   8          unsigned char sec;
   9          unsigned char week;
  10          };
  11          bit flag200ms = 1; //200ms 定时标志
  12          struct sTime bufTime; //日期时间缓冲区
  13          unsigned char setIndex = 0; //时间设置索引
  14          unsigned char T0RH = 0; //T0 重载值的高字节
  15          unsigned char T0RL = 0; //T0 重载值的低字节
  16          void ConfigTimer0(unsigned int ms);
  17          void RefreshTimeShow();
  18          extern void InitDS1302();
  19          extern void GetRealTime(struct sTime *time);
  20          extern void SetRealTime(struct sTime *time);
  21          extern void KeyScan();
  22          extern void KeyDriver();
  23          extern void InitLcd1602();
  24          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  25          extern void LcdSetCursor(unsigned char x, unsigned char y);
  26          extern void LcdOpenCursor();
  27          extern void LcdCloseCursor();
  28          void main()
  29          {
  30   1      unsigned char psec=0xAA; //秒备份，初值 AA 确保首次读取时间后会刷新显示
  31   1      EA = 1; //开总中断
  32   1      ConfigTimer0(1); //T0 定时 1ms
  33   1      InitDS1302(); //初始化实时时钟
  34   1      InitLcd1602(); //初始化液晶
  35   1      //初始化屏幕上固定不变的内容
  36   1      LcdShowStr(3, 0, "20 - - ");
  37   1      LcdShowStr(4, 1, " : : ");
  38   1      while (1)
  39   1      {
  40   2      KeyDriver(); //调用按键驱动
  41   2      if (flag200ms && (setIndex == 0))
  42   2      { //每隔 200ms 且未处于设置状态时，
  43   3      flag200ms = 0;
  44   3      GetRealTime(&bufTime); //获取当前时间
  45   3      if (psec != bufTime.sec) //检测到时间有变化时刷新显示
  46   3      {
  47   4      RefreshTimeShow();
  48   4      psec = bufTime.sec; //用当前值更新上次秒数
  49   4      }
  50   3      }
  51   2      }
  52   1      }
  53          /* 将一个 BCD 码字节显示到屏幕上，(x,y)-屏幕起始坐标，bcd-待显示 BCD 码 */
  54          void ShowBcdByte(unsigned char x, unsigned char y, unsigned char bcd)
  55          {
C51 COMPILER V9.01   MAIN                                                                  04/26/2018 16:53:16 PAGE 2   

  56   1      unsigned char str[4];
  57   1      str[0] = (bcd >> 4) + '0';
  58   1      str[1] = (bcd&0x0F) + '0';
  59   1      str[2] = '\0';
  60   1      LcdShowStr(x, y, str);
  61   1      }
  62          /* 刷新日期时间的显示 */
  63          void RefreshTimeShow()
  64          {
  65   1      ShowBcdByte(5, 0, bufTime.year);
  66   1      ShowBcdByte(8, 0, bufTime.mon);
  67   1      ShowBcdByte(11, 0, bufTime.day);
  68   1      ShowBcdByte(4, 1, bufTime.hour);
  69   1      ShowBcdByte(7, 1, bufTime.min);
  70   1      ShowBcdByte(10, 1, bufTime.sec);
  71   1      }
  72          /* 刷新当前设置位的光标指示 */
  73          void RefreshSetShow()
  74          {
  75   1      switch (setIndex)
  76   1      {
  77   2      case 1: LcdSetCursor(5, 0); break;
  78   2      case 2: LcdSetCursor(6, 0); break;
  79   2      case 3: LcdSetCursor(8, 0); break;
  80   2      case 4: LcdSetCursor(9, 0); break;
  81   2      case 5: LcdSetCursor(11, 0); break;
  82   2      case 6: LcdSetCursor(12, 0); break;
  83   2      case 7: LcdSetCursor(4, 1); break;
  84   2      case 8: LcdSetCursor(5, 1); break;
  85   2      case 9: LcdSetCursor(7, 1); break;
  86   2      case 10: LcdSetCursor(8, 1); break;
  87   2      case 11: LcdSetCursor(10, 1); break;
  88   2      case 12: LcdSetCursor(11, 1); break;
  89   2      default: break;
  90   2      }
  91   1      }
  92          /* 递增一个 BCD 码的高位 */
  93          unsigned char IncBcdHigh(unsigned char bcd)
  94          {
  95   1      if ((bcd&0xF0) < 0x90)
  96   1      bcd += 0x10;
  97   1      else
  98   1      bcd &= 0x0F;
  99   1      return bcd;
 100   1      }
 101          /* 递增一个 BCD 码的低位 */
 102          unsigned char IncBcdLow(unsigned char bcd)
 103          {
 104   1      if ((bcd&0x0F) < 0x09)
 105   1      bcd += 0x01;
 106   1      else
 107   1      bcd &= 0xF0;
 108   1      return bcd;
 109   1      }
 110          /* 递减一个 BCD 码的高位 */
 111          unsigned char DecBcdHigh(unsigned char bcd)
 112          {
 113   1      if ((bcd&0xF0) > 0x00)
 114   1      bcd -= 0x10;
 115   1      else
 116   1      bcd |= 0x90;
 117   1      return bcd;
C51 COMPILER V9.01   MAIN                                                                  04/26/2018 16:53:16 PAGE 3   

 118   1      }
 119          /* 递减一个 BCD 码的低位 */
 120          unsigned char DecBcdLow(unsigned char bcd)
 121          {
 122   1      if ((bcd&0x0F) > 0x00)
 123   1      bcd -= 0x01;
 124   1      else
 125   1      bcd |= 0x09;
 126   1      return bcd;
 127   1      }
 128          /* 递增时间当前设置位的值 */
 129          void IncSetTime()
 130          {
 131   1      switch (setIndex)
 132   1      {
 133   2      case 1: bufTime.year = IncBcdHigh(bufTime.year); break;
 134   2      case 2: bufTime.year = IncBcdLow(bufTime.year); break;
 135   2      case 3: bufTime.mon = IncBcdHigh(bufTime.mon); break;
 136   2      case 4: bufTime.mon = IncBcdLow(bufTime.mon); break;
 137   2      case 5: bufTime.day = IncBcdHigh(bufTime.day); break;
 138   2      case 6: bufTime.day = IncBcdLow(bufTime.day); break;
 139   2      case 7: bufTime.hour = IncBcdHigh(bufTime.hour); break;
 140   2      case 8: bufTime.hour = IncBcdLow(bufTime.hour); break;
 141   2      case 9: bufTime.min = IncBcdHigh(bufTime.min); break;
 142   2      case 10: bufTime.min = IncBcdLow(bufTime.min); break;
 143   2      case 11: bufTime.sec = IncBcdHigh(bufTime.sec); break;
 144   2      case 12: bufTime.sec = IncBcdLow(bufTime.sec); break;
 145   2      default: break;
 146   2      }
 147   1      RefreshTimeShow();
 148   1      RefreshSetShow();
 149   1      }
 150          /* 递减时间当前设置位的值 */
 151          void DecSetTime()
 152          {
 153   1      switch (setIndex)
 154   1      {
 155   2      case 1: bufTime.year = DecBcdHigh(bufTime.year); break;
 156   2      case 2: bufTime.year = DecBcdLow(bufTime.year); break;
 157   2      case 3: bufTime.mon = DecBcdHigh(bufTime.mon); break;
 158   2      case 4: bufTime.mon = DecBcdLow(bufTime.mon); break;
 159   2      case 5: bufTime.day = DecBcdHigh(bufTime.day); break;
 160   2      case 6: bufTime.day = DecBcdLow(bufTime.day); break;
 161   2      case 7: bufTime.hour = DecBcdHigh(bufTime.hour); break;
 162   2      case 8: bufTime.hour = DecBcdLow(bufTime.hour); break;
 163   2      case 9: bufTime.min = DecBcdHigh(bufTime.min); break;
 164   2      case 10: bufTime.min = DecBcdLow(bufTime.min); break;
 165   2      case 11: bufTime.sec = DecBcdHigh(bufTime.sec); break;
 166   2      case 12: bufTime.sec = DecBcdLow(bufTime.sec); break;
 167   2      default: break;
 168   2      }
 169   1      RefreshTimeShow();
 170   1      RefreshSetShow();
 171   1      }
 172          /* 右移时间设置位 */
 173          void RightShiftTimeSet()
 174          {
 175   1      if (setIndex != 0)
 176   1      {
 177   2      if (setIndex < 12)
 178   2      setIndex++;
 179   2      else
C51 COMPILER V9.01   MAIN                                                                  04/26/2018 16:53:16 PAGE 4   

 180   2      setIndex = 1;
 181   2      RefreshSetShow();
 182   2      }
 183   1      }
 184          /* 左移时间设置位 */
 185          void LeftShiftTimeSet()
 186          {
 187   1      if (setIndex != 0)
 188   1      {
 189   2      if (setIndex > 1)
 190   2      setIndex--;
 191   2      else
 192   2      setIndex = 12;
 193   2      RefreshSetShow();
 194   2      }
 195   1      }
 196          /* 进入时间设置状态 */
 197          void EnterTimeSet()
 198          {
 199   1      setIndex = 2; //把设置索引设置为 2，即可进入设置状态
 200   1      LeftShiftTimeSet(); //再利用现成的左移操作移到位置 1 并完成显示刷新
 201   1      LcdOpenCursor(); //打开光标闪烁效果
 202   1      }
 203          /* 退出时间设置状态，save-是否保存当前设置的时间值 */
 204          void ExitTimeSet(bit save)
 205          {
 206   1      setIndex = 0; //把设置索引设置为 0，即可退出设置状态
 207   1      if (save) //需保存时即把当前设置时间写入 DS1302
 208   1      {
 209   2      SetRealTime(&bufTime);
 210   2      }
 211   1      LcdCloseCursor(); //关闭光标显示
 212   1      }
 213          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 214          void KeyAction(unsigned char keycode)
 215          {
 216   1      if ((keycode>='0') && (keycode<='9')) //本例中不响应字符键
 217   1      {
 218   2      }
 219   1      else if (keycode == 0x26) //向上键，递增当前设置位的值
 220   1      {
 221   2      IncSetTime();
 222   2      }
 223   1      else if (keycode == 0x28) //向下键，递减当前设置位的值
 224   1      {
 225   2      DecSetTime();
 226   2      }
 227   1      else if (keycode == 0x25) //向左键，向左切换设置位
 228   1      {
 229   2      LeftShiftTimeSet();
 230   2      }
 231   1      else if (keycode == 0x27) //向右键，向右切换设置位
 232   1      {
 233   2      RightShiftTimeSet();
 234   2      }
 235   1      else if (keycode == 0x0D) //回车键，进入设置模式/启用当前设置值
 236   1      {
 237   2      if (setIndex == 0) //不处于设置状态时，进入设置状态
 238   2      {
 239   3      EnterTimeSet();
 240   3      }
 241   2      else //已处于设置状态时，保存时间并退出设置状态
C51 COMPILER V9.01   MAIN                                                                  04/26/2018 16:53:16 PAGE 5   

 242   2      {
 243   3      ExitTimeSet(1);
 244   3      }
 245   2      }
 246   1      else if (keycode == 0x1B) //Esc 键，取消当前设置
 247   1      {
 248   2      ExitTimeSet(0);
 249   2      }
 250   1      }
 251          /* 配置并启动 T0，ms-T0 定时时间 */
 252          void ConfigTimer0(unsigned int ms)
 253          {
 254   1      unsigned long tmp; //临时变量
 255   1      tmp = 11059200 / 12; //定时器计数频率
 256   1      tmp = (tmp * ms) / 1000; //计算所需的计数值
 257   1      tmp = 65536 - tmp; //计算定时器重载值
 258   1      tmp = tmp + 28; //补偿中断响应延时造成的误差
 259   1      T0RH = (unsigned char)(tmp>>8); //定时器重载值拆分为高低字节
 260   1      T0RL = (unsigned char)tmp;
 261   1      TMOD &= 0xF0; //清零 T0 的控制位
 262   1      TMOD |= 0x01; //配置 T0 为模式 1
 263   1      TH0 = T0RH; //加载 T0 重载值
 264   1      TL0 = T0RL;
 265   1      ET0 = 1; //使能 T0 中断
 266   1      TR0 = 1; //启动 T0
 267   1      }
 268          /* T0 中断服务函数，执行按键扫描和 200ms 定时 */
 269          void InterruptTimer0() interrupt 1
 270          {
 271   1      static unsigned char tmr200ms = 0;
 272   1      TH0 = T0RH; //重新加载重载值
 273   1      TL0 = T0RL;
 274   1      KeyScan(); //按键扫描
 275   1      tmr200ms++;
 276   1      if (tmr200ms >= 200) //定时 200ms
 277   1      {
 278   2      tmr200ms = 0;
 279   2      flag200ms = 1;
 280   2      }
 281   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1043    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
