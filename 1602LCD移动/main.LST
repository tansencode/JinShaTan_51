C51 COMPILER V9.01   MAIN                                                                  04/18/2018 21:14:48 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          #define LCD1602_DB P0
   4          
   5          sbit LCD1602_RS = P1^0;
   6          sbit LCD1602_RW = P1^1;
   7          sbit LCD1602_E = P1^5;
   8          
   9          bit flag500ms = 0; //500ms 定时标志
  10          unsigned char T0RH = 0; //T0 重载值的高字节
  11          unsigned char T0RL = 0; //T0 重载值的低字节
  12          
  13          //待显示的第一行字符串
  14          unsigned char code str1[] = "I love you!";
  15          //待显示的第二行字符串，需保持与第一行字符串等长，较短的行可用空格补齐
  16          unsigned char code str2[] = "Let's marry";
  17          void ConfigTimer0(unsigned int ms);
  18          void InitLcd1602();
  19          void LcdShowStr(unsigned char x, unsigned char y,
  20          unsigned char *str, unsigned char len);
  21          void main()
  22          {
  23   1      unsigned char i;
  24   1      unsigned char index = 0; //移动索引
  25   1      unsigned char pdata bufMove1[16+sizeof(str1)+16]; //移动显示缓冲区 1
  26   1      unsigned char pdata bufMove2[16+sizeof(str2)+16]; //移动显示缓冲区 2
  27   1      EA = 1; //开总中断
  28   1      ConfigTimer0(10); //配置 T0 定时 10ms
  29   1      InitLcd1602(); //初始化液晶
  30   1      //缓冲区开头一段填充为空格
  31   1      for (i=0; i<16; i++)
  32   1      {
  33   2      bufMove1[i] = ' ';
  34   2      bufMove2[i] = ' ';
  35   2      }
  36   1      //待显示字符串拷贝到缓冲区中间位置
  37   1      for (i=0; i<(sizeof(str1)-1); i++)
  38   1      {
  39   2      bufMove1[16+i] = str1[i];
  40   2      bufMove2[16+i] = str2[i];
  41   2      }
  42   1      //缓冲区结尾一段也填充为空格
  43   1      for (i=(16+sizeof(str1)-1); i<sizeof(bufMove1); i++)
  44   1      {
  45   2      bufMove1[i] = ' ';
  46   2      bufMove2[i] = ' ';
  47   2      }
  48   1      while (1)
  49   1      {
  50   2      if (flag500ms) //每 500ms 移动一次屏幕
  51   2      {
  52   3      flag500ms = 0;
  53   3      //从缓冲区抽出需显示的一段字符显示到液晶上
  54   3      LcdShowStr(0, 0, bufMove1+index, 16);
  55   3      LcdShowStr(0, 1, bufMove2+index, 16);
C51 COMPILER V9.01   MAIN                                                                  04/18/2018 21:14:48 PAGE 2   

  56   3      //移动索引递增，实现左移
  57   3      index++;
  58   3      if (index >= (16+sizeof(str1)-1))
  59   3      { //起始位置达到字符串尾部后即返回从头开始
  60   4      index = 0;
  61   4      }
  62   3      }
  63   2      }
  64   1      }
  65          /* 配置并启动 T0，ms-T0 定时时间 */
  66          void ConfigTimer0(unsigned int ms)
  67          {
  68   1      unsigned long tmp; //临时变量
  69   1      tmp = 11059200 / 12; //定时器计数频率
  70   1      tmp = (tmp * ms) / 1000; //计算所需的计数值
  71   1      tmp = 65536 - tmp; //计算定时器重载值
  72   1      tmp = tmp + 12; //补偿中断响应延时造成的误差
  73   1      T0RH = (unsigned char)(tmp>>8); //定时器重载值拆分为高低字节
  74   1      T0RL = (unsigned char)tmp;
  75   1      TMOD &= 0xF0; //清零 T0 的控制位
  76   1      TMOD |= 0x01; //配置 T0 为模式 1
  77   1      TH0 = T0RH; //加载 T0 重载值
  78   1      TL0 = T0RL;
  79   1      ET0 = 1; //使能 T0 中断
  80   1      TR0 = 1; //启动 T0
  81   1      }
  82          /* 等待液晶准备好 */
  83          void LcdWaitReady()
  84          {
  85   1      unsigned char sta;
  86   1      LCD1602_DB = 0xFF;
  87   1      LCD1602_RS = 0;
  88   1      LCD1602_RW = 1;
  89   1      do {
  90   2      LCD1602_E = 1;
  91   2      sta = LCD1602_DB; //读取状态字
  92   2      LCD1602_E = 0;
  93   2      } while (sta & 0x80); //bit7 等于 1 表示液晶正忙，重复检测直到其等于 0 为止
  94   1      }
  95          /* 向 LCD1602 液晶写入一字节命令，cmd-待写入命令值 */
  96          void LcdWriteCmd(unsigned char cmd)
  97          {
  98   1      LcdWaitReady();
  99   1      LCD1602_RS = 0;
 100   1      LCD1602_RW = 0;
 101   1      LCD1602_DB = cmd;
 102   1      LCD1602_E = 1;
 103   1      LCD1602_E = 0;
 104   1      }
 105          /* 向 LCD1602 液晶写入一字节数据，dat-待写入数据值 */
 106          void LcdWriteDat(unsigned char dat)
 107          {
 108   1      LcdWaitReady();
 109   1      LCD1602_RS = 1;
 110   1      LCD1602_RW = 0;
 111   1      LCD1602_DB = dat;
 112   1      LCD1602_E = 1;
 113   1      LCD1602_E = 0;
 114   1      }
 115          /* 设置显示 RAM 起始地址，亦即光标位置，(x,y)-对应屏幕上的字符坐标 */
 116          void LcdSetCursor(unsigned char x, unsigned char y)
 117          {
C51 COMPILER V9.01   MAIN                                                                  04/18/2018 21:14:48 PAGE 3   

 118   1      unsigned char addr;
 119   1      if (y == 0) //由输入的屏幕坐标计算显示 RAM 的地址
 120   1      addr = 0x00 + x; //第一行字符地址从 0x00 起始
 121   1      else
 122   1      addr = 0x40 + x; //第二行字符地址从 0x40 起始
 123   1      LcdWriteCmd(addr | 0x80); //设置 RAM 地址
 124   1      }
 125          /* 在液晶上显示字符串，(x,y)-对应屏幕上的起始坐标，
 126          str-字符串指针，len-需显示的字符长度 */
 127          void LcdShowStr(unsigned char x, unsigned char y,
 128          unsigned char *str, unsigned char len)
 129          {
 130   1      LcdSetCursor(x, y); //设置起始地址
 131   1      while (len--) //连续写入 len 个字符数据
 132   1      {
 133   2      LcdWriteDat(*str++); //先取 str 指向的数据，然后 str 自加 1
 134   2      }
 135   1      }
 136          /* 初始化 1602 液晶 */
 137          void InitLcd1602()
 138          {
 139   1      LcdWriteCmd(0x38); //16*2 显示，5*7 点阵，8 位数据接口
 140   1      LcdWriteCmd(0x0C); //显示器开，光标关闭
 141   1      LcdWriteCmd(0x06); //文字不动，地址自动+1
 142   1      LcdWriteCmd(0x01); //清屏
 143   1      }
 144          /* T0 中断服务函数，定时 500ms */
 145          void InterruptTimer0() interrupt 1
 146          {
 147   1      static unsigned char tmr500ms = 0;
 148   1      TH0 = T0RH; //重新加载重载值
 149   1      TL0 = T0RL;
 150   1      tmr500ms++;
 151   1      if (tmr500ms >= 50)
 152   1      {
 153   2      tmr500ms = 0;
 154   2      flag500ms = 1;
 155   2      }
 156   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    416    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      88
   DATA SIZE        =      3      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
