C51 COMPILER V9.01   DS18B20                                                               05/17/2018 12:16:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN DS18B20.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE DS18B20.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          
   4          sbit IO_18B20 = P3^2;  //DS18B20通信引脚
   5          
   6          /* 软件延时函数，延时时间(t*10)us */
   7          void DelayX10us(unsigned char t)
   8          {
   9   1          do {
  10   2              _nop_();
  11   2              _nop_();
  12   2              _nop_();
  13   2              _nop_();
  14   2              _nop_();
  15   2              _nop_();
  16   2              _nop_();
  17   2              _nop_();
  18   2          } while (--t);
  19   1      }
  20          /* 复位总线，获取存在脉冲，以启动一次读写操作 */
  21          bit Get18B20Ack()
  22          {
  23   1          bit ack;
  24   1          
  25   1          EA = 0;   //禁止总中断
  26   1          IO_18B20 = 0;     //产生500us复位脉冲
  27   1          DelayX10us(50);
  28   1          IO_18B20 = 1;
  29   1          DelayX10us(6);    //延时60us
  30   1          ack = IO_18B20;   //读取存在脉冲
  31   1          while(!IO_18B20); //等待存在脉冲结束
  32   1          EA = 1;   //重新使能总中断
  33   1          
  34   1          return ack;
  35   1      }
  36          /* 向DS18B20写入一个字节，dat-待写入字节 */
  37          void Write18B20(unsigned char dat)
  38          {
  39   1          unsigned char mask;
  40   1          
  41   1          EA = 0;   //禁止总中断
  42   1          for (mask=0x01; mask!=0; mask<<=1)  //低位在先，依次移出8个bit
  43   1          {
  44   2              IO_18B20 = 0;         //产生2us低电平脉冲
  45   2              _nop_();
  46   2              _nop_();
  47   2              if ((mask&dat) == 0)  //输出该bit值
  48   2                  IO_18B20 = 0;
  49   2              else
  50   2                  IO_18B20 = 1;
  51   2              DelayX10us(6);        //延时60us
  52   2              IO_18B20 = 1;         //拉高通信引脚
  53   2          }
  54   1          EA = 1;   //重新使能总中断
  55   1      }
C51 COMPILER V9.01   DS18B20                                                               05/17/2018 12:16:21 PAGE 2   

  56          /* 从DS18B20读取一个字节，返回值-读到的字节 */
  57          unsigned char Read18B20()
  58          {
  59   1          unsigned char dat;
  60   1          unsigned char mask;
  61   1          
  62   1          EA = 0;   //禁止总中断
  63   1          for (mask=0x01; mask!=0; mask<<=1)  //低位在先，依次采集8个bit
  64   1          {
  65   2              IO_18B20 = 0;         //产生2us低电平脉冲
  66   2              _nop_();
  67   2              _nop_();
  68   2              IO_18B20 = 1;         //结束低电平脉冲，等待18B20输出数据
  69   2              _nop_();              //延时2us
  70   2              _nop_();
  71   2              if (!IO_18B20)        //读取通信引脚上的值
  72   2                  dat &= ~mask;
  73   2              else
  74   2                  dat |= mask;
  75   2              DelayX10us(6);        //再延时60us
  76   2          }
  77   1          EA = 1;   //重新使能总中断
  78   1      
  79   1          return dat;
  80   1      }
  81          /* 启动一次18B20温度转换，返回值-表示是否启动成功 */
  82          bit Start18B20()
  83          {
  84   1          bit ack;
  85   1          
  86   1          ack = Get18B20Ack();   //执行总线复位，并获取18B20应答
  87   1          if (ack == 0)          //如18B20正确应答，则启动一次转换
  88   1          {
  89   2              Write18B20(0xCC);  //跳过ROM操作
  90   2              Write18B20(0x44);  //启动一次温度转换
  91   2          }
  92   1          return ~ack;   //ack==0表示操作成功，所以返回值对其取反
  93   1      }
  94          /* 读取DS18B20转换的温度值，返回值-表示是否读取成功 */
  95          bit Get18B20Temp(int *temp)
  96          {
  97   1          bit ack;
  98   1          unsigned char LSB, MSB; //16bit温度值的低字节和高字节
  99   1          
 100   1          ack = Get18B20Ack();    //执行总线复位，并获取18B20应答
 101   1          if (ack == 0)           //如18B20正确应答，则读取温度值
 102   1          {
 103   2              Write18B20(0xCC);   //跳过ROM操作
 104   2              Write18B20(0xBE);   //发送读命令
 105   2              LSB = Read18B20();  //读温度值的低字节
 106   2              MSB = Read18B20();  //读温度值的高字节
 107   2              *temp = ((int)MSB << 8) + LSB;  //合成为16bit整型数
 108   2          }
 109   1          return ~ack;  //ack==0表示操作应答，所以返回值为其取反值
 110   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    187    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.01   DS18B20                                                               05/17/2018 12:16:21 PAGE 3   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
