C51 COMPILER V9.01   MAIN                                                                  04/13/2018 23:05:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<at89x52.h>
   2          
   3          sbit KEY_IN_1 = P2^4;      //定义按键IO口地址
   4          sbit KEY_IN_2 = P2^5;
   5          sbit KEY_IN_3 = P2^6;
   6          sbit KEY_IN_4 = P2^7;
   7          sbit KEY_OUT_1 = P2^3;
   8          sbit KEY_OUT_2 = P2^2;
   9          sbit KEY_OUT_3 = P2^1;
  10          sbit KEY_OUT_4 = P2^0;
  11          
  12          sbit ADDR0 = P1^0;
  13          sbit ADDR1 = P1^1;
  14          sbit ADDR2 = P1^2;
  15          sbit ADDR3 = P1^3;
  16          sbit ENLED = P1^4;
  17          
  18          sbit MC0 = P3^0;
  19          sbit MC1 = P3^1;
  20          sbit MC2 = P3^2;
  21          sbit MC3 = P3^3;
  22          
  23          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  24          { 0x31, 0x32, 0x33, 0x26 }, //数字键 1、数字键 2、数字键 3、向上键
  25          { 0x34, 0x35, 0x36, 0x25 }, //数字键 4、数字键 5、数字键 6、向左键
  26          { 0x37, 0x38, 0x39, 0x28 }, //数字键 7、数字键 8、数字键 9、向下键
  27          { 0x30, 0x1B, 0x0D, 0x27 } //数字键 0、ESC 键、 回车键、 向右键
  28          };
  29          
  30          unsigned char code LedChar[] = { //数码管显示字符转换表
  31          0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
  32          0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
  33          };
  34          unsigned char LedBuff[6] = { //数码管显示缓冲区
  35          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  36          };
  37          
  38          unsigned char KeySta[4][4] = { //全部矩阵按键的当前状态
  39          {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
  40          };
  41          
  42          signed long beats = 0; //电机转动节拍总数
  43          void KeyDriver();
  44          
  45          void main()
  46          {
  47   1      EA = 1; //使能总中断,打开总开关
  48   1      ENLED = 0; //选择数码管进行显示
  49   1      ADDR3 = 1;
  50   1      T2MOD = 0x00; //设置 T2 为模式 0
  51   1      T2CON=0x00;
  52   1      TH2 = 0xFC; //为 T2 赋初值 0xFC67，定时 1ms
  53   1      TL2 = 0x67;
  54   1      RCAP2H=0xFC;
  55   1      RCAP2L=0x67;
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 23:05:37 PAGE 2   

  56   1      ET2 = 1; //使能 T2 中断
  57   1      TR2 = 1; //启动 T2
  58   1      LedBuff[0] = LedChar[0]; //上电显示 0
  59   1      while (1)
  60   1      {
  61   2      KeyDriver(); //调用按键驱动函数
  62   2      }
  63   1      }
  64          
  65          /* 将一个无符号长整型的数字显示到数码管上，num-待显示数字 */
  66          void ShowNumber(unsigned long num)
  67          {
  68   1      signed char i;
  69   1      unsigned char buf[6];
  70   1      for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
  71   1      {
  72   2      buf[i] = num % 10;
  73   2      num = num / 10;
  74   2      }
  75   1      for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
  76   1      {
  77   2      if (buf[i] == 0)
  78   2      LedBuff[i] = 0xFF;
  79   2      else
  80   2      break;
  81   2      }
  82   1      for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
  83   1      {
  84   2      LedBuff[i] = LedChar[buf[i]];
  85   2      }
  86   1      }
  87          
  88          
  89          /* 步进电机启动函数，angle-需转过的角度 */
  90          void StartMotor(signed long angle)
  91          {
  92   1      //在计算前关闭中断，完成后再打开，以避免中断打断计算过程而造成错误
  93   1      EA = 0;
  94   1      beats = (angle * 4076)/360 ; //实测为 4076 拍转动一圈
  95   1      EA = 1;
  96   1      }
  97          
  98          /* 步进电机停止函数 */
  99          void StopMotor()
 100          {
 101   1      EA = 0;
 102   1      beats = 0;
 103   1      EA = 1;
 104   1      }
 105          
 106          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 107          void KeyAction(unsigned char keycode)
 108          {
 109   1      static bit dirMotor = 0; //电机转动方向
 110   1      static signed long num=0;                 //保存输入的角度值
 111   1      if ((keycode>=0x30) && (keycode<=0x39)) //控制电机转动
 112   1      {
 113   2      ENLED = 0; //选择数码管进行显示
 114   2      ADDR3 = 1;
 115   2      num = (num*10)+(keycode-0x30); //整体十进制左移，新数字进入个位
 116   2      ShowNumber(num); //运算结果显示到数码管
 117   2      }
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 23:05:37 PAGE 3   

 118   1      else if(keycode==0x0D)     //按回车键开始转动
 119   1      {
 120   2      if (dirMotor == 0)        //正转
 121   2      {
 122   3      ShowNumber(num); //运算结果显示到数码管
 123   3      StartMotor(num);
 124   3      
 125   3      num=0;
 126   3      
 127   3      }
 128   2      else
 129   2      {
 130   3      ShowNumber(num); //运算结果显示到数码管
 131   3      StartMotor(-1*(num));     //反转
 132   3      
 133   3      num=0;
 134   3      
 135   3      }
 136   2      }
 137   1      else if (keycode == 0x26) //向上键，控制转动方向为正转
 138   1      {
 139   2      dirMotor = 0;
 140   2      }
 141   1      else if (keycode == 0x28) //向下键，控制转动方向为反转
 142   1      {
 143   2      dirMotor = 1;
 144   2      }
 145   1      else if (keycode == 0x25) //向左键，固定正转 360 度
 146   1      {
 147   2      StartMotor(360);
 148   2      }
 149   1      else if (keycode == 0x27) //向右键，固定反转 360 度
 150   1      {
 151   2      StartMotor(-360);
 152   2      }
 153   1      else if (keycode == 0x1B) //Esc 键，停止转动
 154   1      {
 155   2      num=0;
 156   2      ShowNumber(num); //清零后的加数显示到数码管
 157   2      StopMotor();
 158   2      }
 159   1      }
 160          
 161          
 162          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 163          void KeyDriver()
 164          {
 165   1      unsigned char i, j;
 166   1      static unsigned char backup[4][4] = { //按键值备份，保存前一次的值
 167   1      {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
 168   1      };
 169   1      for (i=0; i<4; i++) //循环检测 4*4 的矩阵按键
 170   1      {
 171   2      for (j=0; j<4; j++)
 172   2      {
 173   3      if (backup[i][j] != KeySta[i][j]) //检测按键动作
 174   3      {
 175   4      if (backup[i][j] != 0) //按键按下时执行动作
 176   4      {
 177   5      KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
 178   5      }
 179   4      backup[i][j] = KeySta[i][j]; //刷新前一次的备份值
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 23:05:37 PAGE 4   

 180   4      }
 181   3      }
 182   2      }
 183   1      }
 184          
 185          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔 1ms */
 186          void KeyScan()
 187          {
 188   1      unsigned char i;
 189   1      static unsigned char keyout = 0; //矩阵按键扫描输出索引
 190   1      static unsigned char keybuf[4][4] = { //矩阵按键扫描缓冲区
 191   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
 192   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}
 193   1      };
 194   1      //将一行的 4 个按键值移入缓冲区
 195   1      keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
 196   1      keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 197   1      keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 198   1      keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 199   1      //消抖后更新按键状态
 200   1      for (i=0; i<4; i++) //每行 4 个按键，所以循环 4 次
 201   1      {
 202   2      if ((keybuf[keyout][i] & 0x0F) == 0x00)
 203   2      { //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
 204   3      KeySta[keyout][i] = 0;
 205   3      }
 206   2      else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
 207   2      { //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
 208   3      KeySta[keyout][i] = 1;
 209   3      }
 210   2      }
 211   1      //执行下一次的扫描输出
 212   1      keyout++; //输出索引递增
 213   1      keyout = keyout & 0x03; //索引值加到 4 即归零
 214   1      switch (keyout) //根据索引，释放当前输出引脚，拉低下次的输出引脚
 215   1      {
 216   2      case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 217   2      case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
 218   2      case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 219   2      case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 220   2      default: break;
 221   2      }
 222   1      }
 223          
 224          /* 电机转动控制函数 */
 225          void TurnMotor()
 226          {
 227   1      unsigned char tmp; //临时变量
 228   1      static unsigned char index = 0; //节拍输出索引
 229   1      unsigned char code BeatCode[8] = { //步进电机节拍对应的 IO 控制代码
 230   1      0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 231   1      };
 232   1      if (beats != 0) //节拍数不为 0 则产生一个驱动节拍
 233   1      {
 234   2      if (beats > 0) //节拍数大于 0 时正转
 235   2      {
 236   3      index++; //正转时节拍输出索引递增
 237   3      index = index & 0x07; //用&操作实现到 8 归零
 238   3      beats--; //正转时节拍计数递减
 239   3      }
 240   2      else //节拍数小于 0 时反转
 241   2      {
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 23:05:37 PAGE 5   

 242   3      index--; //反转时节拍输出索引递减
 243   3      index = index & 0x07; //用&操作同样可以实现到-1 时归 7
 244   3      beats++; //反转时节拍计数递增
 245   3      }
 246   2      tmp = P3; //用 tmp 把 P1 口当前值暂存
 247   2      tmp = tmp & 0xF0; //用&操作清零低 4 位
 248   2      tmp = tmp | BeatCode[index]; //用|操作把节拍代码写到低 4 位
 249   2      P3= tmp; //把低 4 位的节拍代码和高 4 位的原值送回 P1
 250   2      }
 251   1      else //节拍数为 0 则关闭电机所有的相
 252   1      {
 253   2      P3 = P3 | 0x0F;
 254   2      }
 255   1      }
 256          
 257          /* 数码管动态扫描刷新函数，需在定时中断中调用 */
 258          void LedScan()
 259          {
 260   1      static unsigned char i = 0; //动态扫描的索引
 261   1      P0 = 0xFF; //显示消隐
 262   1      switch (i)
 263   1      {
 264   2      case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 265   2      case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 266   2      case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 267   2      case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 268   2      case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 269   2      case 5: ADDR2=1; ADDR1=0; ADDR0=1; i=0; P0=LedBuff[5]; break;
 270   2      default: break;
 271   2      }
 272   1      }
 273          
 274          /* T2 中断服务函数，用于按键扫描与电机转动控制 */
 275          void InterruptTimer2() interrupt 5
 276          {
 277   1      static bit div = 0;
 278   1      TF2=0;                          //中断标志位清零，T2自动加载初值
 279   1      LedScan(); //调用数码管显示扫描函数
 280   1      KeyScan(); //执行按键扫描
 281   1      //用一个静态 bit 变量实现二分频，即 2ms 定时，用于控制电机
 282   1      div = ~div;
 283   1      if (div == 1)
 284   1      {
 285   2      TurnMotor();
 286   2      }
 287   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1054    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
