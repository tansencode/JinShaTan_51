C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TIME
OBJECT MODULE PLACED IN Time.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE Time.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #define  _TIME_C
   3          
   4          extern void  ShowLedNumber();
   5          extern void      GetRealTime();
   6          extern void      ShowLedArray();
   7          
   8          unsigned char code WeekMod[] = {  //星期X字符图片表
   9              0xFF, 0x99, 0x00, 0x00, 0x00, 0x81, 0xC3, 0xE7,  //星期日(红心)
  10              0xEF, 0xE7, 0xE3, 0xE7, 0xE7, 0xE7, 0xE7, 0xC3,  //星期1
  11              0xC3, 0x81, 0x9D, 0x87, 0xC3, 0xF9, 0xC1, 0x81,  //星期2
  12              0xC3, 0x81, 0x9D, 0xC7, 0xC7, 0x9D, 0x81, 0xC3,  //星期3
  13              0xCF, 0xC7, 0xC3, 0xC9, 0xC9, 0x81, 0xCF, 0xCF,  //星期4
  14              0x81, 0xC1, 0xF9, 0xC3, 0x87, 0x9D, 0x81, 0xC3,  //星期5
  15              0xC3, 0x81, 0xF9, 0xC3, 0x81, 0x99, 0x81, 0xC3,  //星期6
  16          };
  17          
  18          bit staMute = 0;  //静音标志位
  19          struct sTime CurTime;    //当前日期时间
  20          
  21          SetIndex = 0;  //设置位索引
  22          struct sTime pdata SetTime;  //日期时间设置缓冲区
  23          
  24          /* 获取当前日期时间，并刷新时间和星期的显示 */
  25          void RefreshTime()
  26          {
  27   1          GetRealTime(&CurTime);                  //获取当前日期时间
*** ERROR C267 IN LINE 27 OF TIME.C: 'GetRealTime': requires ANSI-style prototype
  28   1          ShowLedNumber(5, CurTime.hour>>4, 0);   //时
*** ERROR C230 IN LINE 28 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 28 OF TIME.C: 'hour': undefined member
  29   1          ShowLedNumber(4, CurTime.hour&0xF,1);
*** ERROR C230 IN LINE 29 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 29 OF TIME.C: 'hour': undefined member
  30   1          ShowLedNumber(3, CurTime.min>>4,  0);   //分
*** ERROR C230 IN LINE 30 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 30 OF TIME.C: 'min': undefined member
  31   1          ShowLedNumber(2, CurTime.min&0xF, 1);
*** ERROR C230 IN LINE 31 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 31 OF TIME.C: 'min': undefined member
  32   1          ShowLedNumber(1, CurTime.sec>>4,  0);   //秒
*** ERROR C230 IN LINE 32 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 32 OF TIME.C: 'sec': undefined member
  33   1          ShowLedNumber(0, CurTime.sec&0xF, 0);
*** ERROR C230 IN LINE 33 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 33 OF TIME.C: 'sec': undefined member
  34   1          ShowLedArray(WeekMod + CurTime.week*8); //星期
*** ERROR C230 IN LINE 34 OF TIME.C: 'sTime': unknown struct/union/enum tag
*** ERROR C204 IN LINE 34 OF TIME.C: 'week': undefined member
  35   1      }
  36          /* 日期刷新函数，ops-刷新选项：为0时只当日期变化才刷新，非0则立即刷新 */
  37          void RefreshDate(uint8 ops)
*** ERROR C141 IN LINE 37 OF TIME.C: syntax error near 'ops', expected ')'
  38          {
  39   1          uint8 pdata str[12];
C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 2   

*** ERROR C141 IN LINE 39 OF TIME.C: syntax error near 'pdata'
*** ERROR C202 IN LINE 39 OF TIME.C: 'str': undefined identifier
  40   1          static uint8 backup = 0;
*** ERROR C141 IN LINE 40 OF TIME.C: syntax error near 'static'
*** ERROR C202 IN LINE 40 OF TIME.C: 'backup': undefined identifier
  41   1          
  42   1          if ((backup!=CurTime.day) || (ops!=0))
*** ERROR C202 IN LINE 42 OF TIME.C: 'backup': undefined identifier
  43   1          {
  44   2              str[0] = ((CurTime.year>>12) & 0xF) + '0';  //4位数年份
*** ERROR C202 IN LINE 44 OF TIME.C: 'str': undefined identifier
  45   2              str[1] = ((CurTime.year>>8) & 0xF) + '0';
*** ERROR C202 IN LINE 45 OF TIME.C: 'str': undefined identifier
  46   2              str[2] = ((CurTime.year>>4) & 0xF) + '0';
*** ERROR C202 IN LINE 46 OF TIME.C: 'str': undefined identifier
  47   2              str[3] = (CurTime.year & 0xF) + '0';
*** ERROR C202 IN LINE 47 OF TIME.C: 'str': undefined identifier
  48   2              str[4] = '-';                        //分隔符
*** ERROR C202 IN LINE 48 OF TIME.C: 'str': undefined identifier
  49   2              str[5] = (CurTime.mon >> 4) + '0';   //月份
*** ERROR C202 IN LINE 49 OF TIME.C: 'str': undefined identifier
  50   2              str[6] = (CurTime.mon & 0xF) + '0';
*** ERROR C202 IN LINE 50 OF TIME.C: 'str': undefined identifier
  51   2              str[7] = '-';                        //分隔符
*** ERROR C202 IN LINE 51 OF TIME.C: 'str': undefined identifier
  52   2              str[8] = (CurTime.day >> 4) + '0';   //日期
*** ERROR C202 IN LINE 52 OF TIME.C: 'str': undefined identifier
  53   2              str[9] = (CurTime.day & 0xF) + '0';
*** ERROR C202 IN LINE 53 OF TIME.C: 'str': undefined identifier
  54   2              str[10] = '\0';         //字符串结束符
*** ERROR C202 IN LINE 54 OF TIME.C: 'str': undefined identifier
  55   2              LcdShowStr(0, 0, str);  //显示到液晶上
  56   2              backup = CurTime.day;   //刷新上次日期值
  57   2          }
  58   1      }
  59          /* 刷新闹钟时间的显示 */
  60          void RefreshAlarm()
  61          {
  62   1          uint8 pdata str[8];
  63   1          
  64   1          str[0] = (AlarmHour >> 4) + '0';   //闹钟小时数
  65   1          str[1] = (AlarmHour & 0xF) + '0';
  66   1          str[2] = ':';                      //分隔符
  67   1          str[3] = (AlarmMin >> 4) + '0';    //闹钟分钟数
  68   1          str[4] = (AlarmMin & 0xF) + '0';
  69   1          str[5] = '\0';                     //字符串结束符
  70   1          LcdShowStr(9, 1, str);             //显示到液晶上
  71   1      }
  72          /* 闹钟监控函数，抵达设定的闹钟时间时执行闹铃 */
  73          void AlarmMonitor()
  74          {
  75   1          if ((CurTime.hour==AlarmHour) && (CurTime.min==AlarmMin)) //检查时间匹配
  76   1          {
  77   2              if (!staMute)  //检查是否静音
  78   2                  staBuzzer = ~staBuzzer;  //实现蜂鸣器断续鸣叫
  79   2              else
  80   2                  staBuzzer = 0;
  81   2          }
  82   1          else
  83   1          {
  84   2              staMute = 0;
  85   2              staBuzzer = 0;
C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 3   

  86   2          }
  87   1      }
  88          /* 将设置时间及标题提示显示到液晶上 */
  89          void ShowSetTime()
  90          {
  91   1          uint8 pdata str[18];
  92   1          
  93   1          str[0]  = ((SetTime.year>>4) & 0xF) + '0';  //2位数年份
  94   1          str[1]  = (SetTime.year & 0xF) + '0';
  95   1          str[2]  = '-';
  96   1          str[3]  = (SetTime.mon >> 4) + '0';   //月份
  97   1          str[4]  = (SetTime.mon & 0xF) + '0';
  98   1          str[5]  = '-';
  99   1          str[6]  = (SetTime.day >> 4) + '0';   //日期
 100   1          str[7]  = (SetTime.day & 0xF) + '0';
 101   1          str[8]  = '-';
 102   1          str[9]  = (SetTime.week & 0xF) + '0'; //星期
 103   1          str[10] = ' ';
 104   1          str[11] = (SetTime.hour >> 4) + '0';  //小时
 105   1          str[12] = (SetTime.hour & 0xF) + '0';
 106   1          str[13] = ':';
 107   1          str[14] = (SetTime.min >> 4) + '0';   //分钟
 108   1          str[15] = (SetTime.min & 0xF) + '0';
 109   1          str[16] = '\0';
 110   1      }
 111          /* 将设置闹钟及标题提示显示到液晶上 */
 112          void ShowSetAlarm()
 113          {
 114   1          uint8 pdata str[8];
 115   1          
 116   1          str[0] = (SetAlarmHour >> 4) + '0';   //小时
 117   1          str[1] = (SetAlarmHour & 0xF) + '0';
 118   1          str[2] = ':';
 119   1          str[3] = (SetAlarmMin >> 4) + '0';    //分钟
 120   1          str[4] = (SetAlarmMin & 0xF) + '0';
 121   1          str[5] = '\0';
 122   1      }
 123          
 124          /* 取消当前设置，返回正常运行状态 */
 125          void CancelCurSet()
 126          {
 127   1          staSystem = E_NORMAL;
 128   1          
 129   1          RefreshTime();   //刷新当前时间
 130   1          RefreshDate(1);  //立即刷新日期显示
 131   1         
 132   1      }
 133          
 134          /* 时间或闹钟设置时，设置位右移一位，到头后折回 */
 135          /*void SetRightShift()
 136          {
 137              if (staSystem == E_SET_TIME)
 138              {
 139                  switch (SetIndex)
 140                  {
 141                      case 0: SetIndex=1;  LcdSetCursor(1, 1); break;
 142                      case 1: SetIndex=2;  LcdSetCursor(3, 1); break;
 143                      case 2: SetIndex=3;  LcdSetCursor(4, 1); break;
 144                      case 3: SetIndex=4;  LcdSetCursor(6, 1); break;
 145                      case 4: SetIndex=5;  LcdSetCursor(7, 1); break;
 146                      case 5: SetIndex=6;  LcdSetCursor(9, 1); break;
 147                      case 6: SetIndex=7;  LcdSetCursor(11,1); break;
C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 4   

 148                      case 7: SetIndex=8;  LcdSetCursor(12,1); break;
 149                      case 8: SetIndex=9;  LcdSetCursor(14,1); break;
 150                      case 9: SetIndex=10; LcdSetCursor(15,1); break;
 151                      default: SetIndex=0; LcdSetCursor(0, 1); break;
 152                  }
 153              }
 154              else if (staSystem == E_SET_ALARM)
 155              {
 156                  switch (SetIndex)
 157                  {
 158                      case 0: SetIndex=1;  LcdSetCursor(1,1); break;
 159                      case 1: SetIndex=2;  LcdSetCursor(3,1); break;
 160                      case 2: SetIndex=3;  LcdSetCursor(4,1); break;
 161                      default: SetIndex=0; LcdSetCursor(0,1); break;
 162                  }
 163              }
 164          }  */
 165          /* 时间或闹钟设置时，设置位左移一位，到头后折回 */
 166          /*void SetLeftShift()
 167          {
 168              if (staSystem == E_SET_TIME)
 169              {
 170                  switch (SetIndex)
 171                  {
 172                      case 0: SetIndex=10; LcdSetCursor(15,1); break;
 173                      case 1: SetIndex=0;  LcdSetCursor(0, 1); break;
 174                      case 2: SetIndex=1;  LcdSetCursor(1, 1); break;
 175                      case 3: SetIndex=2;  LcdSetCursor(3, 1); break;
 176                      case 4: SetIndex=3;  LcdSetCursor(4, 1); break;
 177                      case 5: SetIndex=4;  LcdSetCursor(6, 1); break;
 178                      case 6: SetIndex=5;  LcdSetCursor(7, 1); break;
 179                      case 7: SetIndex=6;  LcdSetCursor(9, 1); break;
 180                      case 8: SetIndex=7;  LcdSetCursor(11,1); break;
 181                      case 9: SetIndex=8;  LcdSetCursor(12,1); break;
 182                      default: SetIndex=9; LcdSetCursor(14,1); break;
 183                  }
 184              }
 185              else if (staSystem == E_SET_ALARM)
 186              {
 187                  switch (SetIndex)
 188                  {
 189                      case 0: SetIndex=3;  LcdSetCursor(4,1); break;
 190                      case 1: SetIndex=0;  LcdSetCursor(0,1); break;
 191                      case 2: SetIndex=1;  LcdSetCursor(1,1); break;
 192                      default: SetIndex=2; LcdSetCursor(3,1); break;
 193                  }
 194              }
 195          }*/
 196          /* 输入设置数字，修改对应的设置位，并显示该数字，ascii-输入数字的ASCII码 */
 197          /*void InputSetNumber(uint8 ascii)
 198          {
 199              uint8 num;
 200              
 201              num = ascii - '0';
 202              if (num <= 9)  //只响应0～9的数字
 203              {
 204                  if (staSystem == E_SET_TIME)
 205                  {
 206                      switch (SetIndex)
 207                      {
 208                          case 0: SetTime.year = (SetTime.year&0xFF0F)|(num<<4);
 209                                  LcdShowChar(0, 1, ascii);  break;      //年份高位数字
C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 5   

 210                          case 1: SetTime.year = (SetTime.year&0xFFF0)|(num);
 211                                  LcdShowChar(1, 1, ascii);  break;      //年份低位数字
 212                          case 2: SetTime.mon = (SetTime.mon&0x0F)|(num<<4);
 213                                  LcdShowChar(3, 1, ascii);  break;      //月份高位数字
 214                          case 3: SetTime.mon = (SetTime.mon&0xF0)|(num);
 215                                  LcdShowChar(4, 1, ascii);  break;      //月份低位数字
 216                          case 4: SetTime.day = (SetTime.day&0x0F)|(num<<4);
 217                                  LcdShowChar(6, 1, ascii);  break;      //日期高位数字
 218                          case 5: SetTime.day = (SetTime.day&0xF0)|(num);
 219                                  LcdShowChar(7, 1, ascii);  break;      //日期低位数字
 220                          case 6: SetTime.week = (SetTime.week&0xF0)|(num);
 221                                  LcdShowChar(9, 1, ascii);  break;      //星期数字
 222                          case 7: SetTime.hour = (SetTime.hour&0x0F)|(num<<4);
 223                                  LcdShowChar(11,1, ascii);  break;      //小时高位数字
 224                          case 8: SetTime.hour = (SetTime.hour&0xF0)|(num);
 225                                  LcdShowChar(12,1, ascii);  break;      //小时低位数字
 226                          case 9: SetTime.min = (SetTime.min&0x0F)|(num<<4);
 227                                  LcdShowChar(14,1, ascii);  break;      //分钟高位数字
 228                          default:SetTime.min = (SetTime.min&0xF0)|(num);
 229                                  LcdShowChar(15,1, ascii);  break;      //分钟低位数字
 230                      }
 231                      SetRightShift();  //完成该位设置后自动右移
 232                  }
 233                  else if (staSystem == E_SET_ALARM)
 234                  {
 235                      switch (SetIndex)
 236                      {
 237                          case 0: SetAlarmHour = (SetAlarmHour&0x0F) | (num<<4);
 238                                  LcdShowChar(0,1, ascii); break;      //小时高位数字
 239                          case 1: SetAlarmHour = (SetAlarmHour&0xF0) | (num);
 240                                  LcdShowChar(1,1, ascii); break;      //小时低位数字
 241                          case 2: SetAlarmMin = (SetAlarmMin&0x0F) | (num<<4);
 242                                  LcdShowChar(3,1, ascii); break;      //分钟高位数字
 243                          default:SetAlarmMin = (SetAlarmMin&0xF0) | (num);
 244                                  LcdShowChar(4,1, ascii); break;      //分钟低位数字
 245                      }
 246                      SetRightShift();  //完成该位设置后自动右移
 247                  }
 248              }
 249          }       */
 250          /* 切换系统运行状态 */
 251          void SwitchSystemSta()
 252          {
 253   1          if (staSystem == E_NORMAL)  //正常运行切换到时间设置
 254   1          {
 255   2              staSystem = E_SET_TIME;
 256   2              SetTime.year = CurTime.year;  //当前时间拷贝到时间设置缓冲区中
 257   2              SetTime.mon  = CurTime.mon;
 258   2              SetTime.day  = CurTime.day;
 259   2              SetTime.hour = CurTime.hour;
 260   2              SetTime.min  = CurTime.min;
 261   2              SetTime.sec  = CurTime.sec;
 262   2              SetTime.week = CurTime.week;
 263   2              ShowSetTime();     //显示设置时间
 264   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 265   2              SetRightShift();
 266   2          }
 267   1          else if (staSystem == E_SET_TIME)  //时间设置切换到闹钟设置
 268   1          {
 269   2              staSystem = E_SET_ALARM;
 270   2              SetTime.sec = 0;          //秒清零，即当设置时间后从0秒开始走时
 271   2              SetRealTime(&SetTime);    //设定时间写入实时时钟
C51 COMPILER V9.01   TIME                                                                  05/03/2018 17:28:25 PAGE 6   

 272   2              SetAlarmHour = AlarmHour; //当前闹钟值拷贝到设置缓冲区
 273   2              SetAlarmMin  = AlarmMin;
 274   2              ShowSetAlarm();    //显示设置闹钟
 275   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 276   2              SetRightShift();
 277   2          }
 278   1          else  //闹钟设置切换会正常运行
 279   1          {
 280   2              staSystem = E_NORMAL;
 281   2              AlarmHour = SetAlarmHour;  //设定的闹钟值写入闹钟时间
 282   2              AlarmMin  = SetAlarmMin;
 283   2              RefreshTime();   //刷新当前时间
 284   2              RefreshDate(1);  //立即刷新日期显示
 285   2          }
 286   1      }
 287          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 288          void KeyAction(uint8 keycode)
 289          {
 290   1          if  ((keycode>='0') && (keycode<='9'))  //数字键输入当前位设定值
 291   1          {
 292   2              InputSetNumber(keycode);
 293   2          }
 294   1          else if (keycode == 0x25)  //向左键，向左切换设置位
 295   1          {
 296   2              SetLeftShift();
 297   2          }
 298   1          else if (keycode == 0x27)  //向右键，向右切换设置位
 299   1          {
 300   2              SetRightShift();
 301   2          }
 302   1          else if (keycode == 0x0D)  //回车键，切换运行状态/保存设置
 303   1          {
 304   2              SwitchSystemSta();
 305   2          }
 306   1          else if (keycode == 0x1B)  //Esc键，静音/取消当前设置
 307   1          {
 308   2              if (staSystem == E_NORMAL) //处于正常运行状态时闹铃静音
 309   2              {
 310   3                  staMute = 1;
 311   3              }
 312   2              else                       //处于设置状态时退出设置
 313   2              {
 314   3                  CancelCurSet();
 315   3              }
 316   2          }
 317   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  32 ERROR(S)
