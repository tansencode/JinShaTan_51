C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          *******************************************************************************
   3          * 1、用0～9的数字键输入密码，允许的密码最大位数由PSW_MAX_LEN宏定义给出
   4          * 2、用户设定的密码由EEPROM保存，并且用“累加和”校验来保证数据的有效性
   5          * 3、程序首次运行时EEPROM中的数据无效，此时会提示“设置密码”
   6          * 4、设置密码时需要用户输入两次相同的密码，以保证设置成功，设置后密码自动保存
   7          * 5、两次输入密码不相同时，将导致密码设置失败，按回车键重新设置
   8          * 6、密码设置成功后，每次开机都会要求用户输入密码，用户键入密码后，按回车键，
   9               系统将键入的密码与EEPROM中保存的密码做对比，相同则系统解锁，否则继续锁定
  10          * 7、密码输入错误系统锁定时，按回车键可以重新开始输入密码
  11          * 8、密码输入正确系统解锁时，按回车键可以进入修改密码的操作
  12          * 9、当忘记密码时，可通过修改PSW_MAX_LEN或PSW_SAVE_ADDR宏定义的值来重置密码
  13          *******************************************************************************
  14          */
  15          
  16          #include <reg52.h>
  17          
  18          #define PSW_MAX_LEN    9    //用宏定义出密码最大长度（最大不超过16）
  19          #define PSW_SAVE_ADDR  0x20  //用宏定义出密码在EEPROM中的保存地址
  20          
  21          sbit ADDR0 = P1^0;
  22          sbit ADDR1 = P1^1;
  23          sbit ADDR2 = P1^2;
  24          sbit ADDR3 = P1^3;
  25          sbit ENLED = P1^4;
  26          
  27          sbit MC0 = P3^0;
  28          sbit MC1 = P3^1;
  29          sbit MC2 = P3^2;
  30          sbit MC3 = P3^3;
  31          
  32          unsigned char code LedChar[] = { //数码管显示字符转换表
  33          0x89, 0x89, 0x89, 0x89, 0x89,0x89,0x89, 0x89,
  34          0x89, 0x89, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  35          };
  36          unsigned char LedBuff[6] = { //数码管显示缓冲区
  37          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  38          };
  39          
  40          signed long beats = 0; //电机转动节拍总数
  41          unsigned char status;  //系统状态字：0-输入密码，1-设置密码，2-设置密码确认，
  42                                 //3-密码设置失败，4-输入的密码正确，5-输入的密码错误
  43          static unsigned long num=0; //用于保存输入的数
  44          unsigned char PswCnt;  //当前输入密码位数的计数器
  45          unsigned char pdata PswSet[PSW_MAX_LEN];   //已设定的密码数据
  46          unsigned char pdata PswBuf1[PSW_MAX_LEN];  //密码输入缓冲区1
  47          unsigned char pdata PswBuf2[PSW_MAX_LEN];  //密码输入缓冲区2
  48          
  49          unsigned char T0RH = 0;  //T0重载值的高字节
  50          unsigned char T0RL = 0;  //T0重载值的低字节
  51          
  52          static unsigned char j ; //动态扫描的索引
  53          void ledon();
  54          extern void KeyScan();
  55          extern void KeyDriver();
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 2   

  56          extern void E2Read(unsigned char *buf, unsigned char addr, unsigned char len);
  57          extern void E2Write(unsigned char *buf, unsigned char addr, unsigned char len);
  58          
  59          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len);
  60          void ConfigTimer0(unsigned int ms);
  61          void ShowNumber(unsigned long num);
  62          bit  ReadPassword();
  63          
  64          void main()
  65          {
  66   1          EA = 1;           //开总中断
  67   1              ENLED = 0; //选择数码管进行显示
  68   1          ADDR3 = 1;
  69   1                      
  70   1              TMOD = 0x01; //设置 T0 为模式 1
  71   1          TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  72   1          TL0 = 0x67;
  73   1          ET0 = 1; //使能 T0 中断
  74   1          TR0 = 1; //启动 T0
  75   1          ConfigTimer0(1);  //配置T0定时1ms
  76   1              LedBuff[0] = LedChar[10]; //上电无显示，等待输入密码
  77   1          InitLcd1602();    //初始化液晶
*** WARNING C206 IN LINE 77 OF MAIN.C: 'InitLcd1602': missing function-prototype
  78   1          if (ReadPassword())  //读取密码并判断是否有效
  79   1          {
  80   2                  j=2;
  81   2              status = 0;     
  82   2          }
  83   1          else
  84   1          {
  85   2                  j=0;
  86   2              status = 1;
  87   2          }
  88   1          FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
  89   1          FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
  90   1          PswCnt = 0;
  91   1          while (1)
  92   1          {
  93   2              KeyDriver();
  94   2          }
  95   1      }
  96          
  97          /* 步进电机启动函数，angle-需转过的角度 */
  98          void StartMotor(signed long angle)
  99          {
 100   1        //在计算前关闭中断，完成后再打开，以避免中断打断计算过程而造成错误
 101   1        EA = 0;
 102   1        beats = (angle * 4076)/360 ; //实测为 4076 拍转动一圈
 103   1        EA = 1;
 104   1      }
 105          /* 步进电机停止函数 */
 106          void StopMotor()
 107          {
 108   1         EA = 0;
 109   1         beats = 0;
 110   1         EA = 1;
 111   1      }
 112          
 113          
 114          /* 将一段内存数据拷贝到另一处，dest-目的地址，src-源地址，len-数据长度 */
 115          void CopyMemory(unsigned char *dest, unsigned char *src, unsigned char len)
 116          {
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 3   

 117   1          while (len--)
 118   1          {
 119   2              *dest++ = *src++;
 120   2          }
 121   1      }
 122          /* 用一个指定字节填充一段内存，dest-目的地址，byt-填充用字节，len-数据长度 */
 123          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len)
 124          {
 125   1          while (len--)
 126   1          {
 127   2              *dest++ = byt;
 128   2          }
 129   1      }
 130          /* 内存比较函数，比较两个指针所指向的内存数据是否相同，
 131             ptr1-待比较指针1，ptr2-待比较指针2，len-待比较长度
 132             返回值-两段内存数据完全相同时返回1，不同返回0 */
 133          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
 134          {
 135   1          while (len--)
 136   1          {
 137   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
 138   2              {
 139   3                  return 0;
 140   3              }
 141   2          }
 142   1          return 1;  //比较完全部长度数据都相等则返回1
 143   1      }
 144          /* 将一段数据按字节累加，返回获得的累加和，dat-数据指针，len-数据长度 */
 145          unsigned char GetChkSum(unsigned char *dat, unsigned char len)
 146          {
 147   1          unsigned char sum = 0;
 148   1          
 149   1          while (len--)
 150   1          {
 151   2              sum += *dat++;
 152   2          }
 153   1          return sum;
 154   1      }
 155          /* 从EEPROM中读取保存的密码数据，并对密码进行“累加和”校验，
 156             返回值-校验通过返回1，否则返回0 */
 157          bit ReadPassword()
 158          {
 159   1          unsigned char sum;
 160   1          unsigned char buf[PSW_MAX_LEN+1];
 161   1          
 162   1          E2Read(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //读取密码数据和校验字节
 163   1          sum = GetChkSum(buf, PSW_MAX_LEN); //计算密码数据的累加和
 164   1          if (buf[PSW_MAX_LEN] == ~sum)      //校验通过，即密码有效时，拷贝密码
 165   1          {
 166   2              CopyMemory(PswSet, buf, PSW_MAX_LEN);
 167   2              return 1;
 168   2          }
 169   1          else  //密码数据无效时，缓冲区默认成全0
 170   1          {
 171   2              FillMemory(PswSet, '\0', PSW_MAX_LEN);
 172   2              return 0;
 173   2          }
 174   1      }
 175          /* 将当前的密码数据保存到EEPROM中，同时添加校验字节 */
 176          void SavePassword()
 177          {
 178   1          unsigned char buf[PSW_MAX_LEN+1];
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 4   

 179   1          
 180   1          CopyMemory(buf, PswSet, PSW_MAX_LEN);  //复制密码数据到缓冲区中
 181   1          buf[PSW_MAX_LEN] = ~GetChkSum(buf, PSW_MAX_LEN);  //填充最后的累加和校验字节
 182   1          E2Write(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //将密码数据保存到EEPROM中
 183   1      }
 184          /* 在液晶上显示与当前输入密码位数相同的*，以指示当前输入的密码位数 */
 185          void ShowPswCnt()
 186          {
 187   1          unsigned char buf[PSW_MAX_LEN+1];
 188   1          
 189   1          FillMemory(buf, '*', PswCnt);
 190   1          FillMemory(buf+PswCnt, '\0', sizeof(buf)-PswCnt);
 191   1        //  LcdShowStr(0, 1, buf);
 192   1      }
 193          /* 数字键动作函数，keycode-数字按键的ASCII值 */
 194          void KeyNumAction(unsigned char keycode)
 195          {
 196   1          switch (status)
 197   1          {
 198   2              case 0: //输入密码状态时，将输入字符填充到PswBuf1
 199   2                  if (PswCnt < PSW_MAX_LEN)
 200   2                  {
 201   3                      PswBuf1[PswCnt] = keycode;
 202   3                      PswCnt++;
 203   3                      ShowPswCnt();
 204   3                  }
 205   2                  break;
 206   2              case 1: //设置密码状态时，将输入字符填充到PswBuf1
 207   2                  if (PswCnt < PSW_MAX_LEN)
 208   2                  {
 209   3                      PswBuf1[PswCnt] = keycode;
 210   3                      PswCnt++;
 211   3                      ShowPswCnt();
 212   3                  }
 213   2                  break;
 214   2              case 2: //设置密码确认状态时，将输入字符填充到PswBuf2
 215   2                  if (PswCnt < PSW_MAX_LEN)
 216   2                  {
 217   3                      PswBuf2[PswCnt] = keycode;
 218   3                      PswCnt++;
 219   3                      ShowPswCnt();
 220   3                  }
 221   2                  break;
 222   2              default: //其它状态不予响应
 223   2                  break;
 224   2          }
 225   1      }
 226          
 227          /* 将一个无符号长整型的数字显示到数码管上，num-待显示数字 */
 228          void ShowNumber(unsigned long num)
 229          {
 230   1          signed char i;
 231   1          unsigned char buf[6];
 232   1          for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
 233   1          {
 234   2             buf[i] = num % 10;
 235   2             num = num / 10;
 236   2          }
 237   1          for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
 238   1          {
 239   2            if (buf[i] == 0)
 240   2            LedBuff[i] = 0xFF;
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 5   

 241   2            else
 242   2            break;
 243   2           }
 244   1           for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
 245   1           {
 246   2              LedBuff[i] = LedChar[buf[i]];
 247   2           }
 248   1      }
 249          /* 数码管动态扫描刷新函数，需在定时中断中调用 */
 250          void LedScan()
 251          {
 252   1          static unsigned char i = 0; //动态扫描的索引
 253   1          P0 = 0xFF; //显示消隐
 254   1          switch (i)
 255   1          {
 256   2             case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 257   2             case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 258   2             case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 259   2             case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 260   2             case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 261   2             case 5: ADDR2=1; ADDR1=0; ADDR0=1; i=0; P0=LedBuff[5]; break;
 262   2             default: break;
 263   2         }
 264   1      }
 265          
 266          void LedScan1()  //led提示设置密码
 267          {
 268   1         static unsigned char i = 0; //动态扫描的索引
 269   1         P0 = 0xFF; //显示消隐
 270   1        switch (i)
 271   1        {
 272   2          case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 273   2          case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 274   2          case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 275   2          case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 276   2              case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 277   2              case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 278   2              case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0x7F; break;
 279   2              default: break;
 280   2        }
 281   1      }
 282          
 283          void LedScan2()                  //led提示再次输入验证密码
 284          {
 285   1           static unsigned char i = 0; //动态扫描的索引
 286   1           P0 = 0xFF; //显示消隐
 287   1           switch (i)
 288   1           {
 289   2               case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 290   2               case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 291   2               case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 292   2               case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 293   2                       case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 294   2                       case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 295   2                       case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xBF; break;
 296   2                       default: break;
 297   2           }
 298   1      }
 299          void LedScan3()   //led提示输入密码
 300          {
 301   1           static unsigned char i = 0; //动态扫描的索引
 302   1           static unsigned int n; //动态扫描的索引
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 6   

 303   1           P0 = 0xFF; //显示消隐
 304   1           switch (i)
 305   1           {
 306   2               case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 307   2               case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 308   2               case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 309   2               case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 310   2               case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 311   2               case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 312   2               case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xCF; break;
 313   2               default: break;
 314   2           }
 315   1      }
*** WARNING C280 IN LINE 302 OF MAIN.C: 'n': unreferenced local variable
 316          
 317          void LedScan4()   //密码输入正确提示
 318          {
 319   1          static unsigned char i = 0; //动态扫描的索引
 320   1          P0 = 0xFF; //显示消隐
 321   1          switch (i)
 322   1          {
 323   2             case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 324   2             case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 325   2             case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 326   2             case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 327   2             case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 328   2             case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 329   2             case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xDF; break;
 330   2             default: break;
 331   2          }
 332   1      }
 333          void LedScan5()                                  //密码输入错误提示
 334          {
 335   1          static unsigned char i = 0; //动态扫描的索引
 336   1          P0 = 0xFF; //显示消隐
 337   1          switch (i)
 338   1          {
 339   2              case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 340   2              case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 341   2              case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 342   2              case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 343   2              case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 344   2              case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 345   2              case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xEF; break;
 346   2              default: break;
 347   2          }
 348   1      }
 349          
 350          void ShowNumber1(unsigned long num)     //数码管无显示等待输入密码
 351          {
 352   1          signed char i;
 353   1          unsigned char buf[6];
 354   1          for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
 355   1          {
 356   2             buf[i] = num % 10;
 357   2             num = num / 10;
 358   2          }
 359   1          for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
 360   1          {
 361   2             if (buf[i] == 0)
 362   2             LedBuff[i] = 0xFF;
 363   2             else
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 7   

 364   2             LedBuff[i] = 0xFF;
 365   2              }
 366   1          for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
 367   1          {
 368   2              LedBuff[i] =0xFF; 
 369   2           } 
 370   1      }
 371          /* 回车键动作函数 */
 372          void KeyEnterAction()
 373          {
 374   1          
 375   1          switch (status)
 376   1          {
 377   2              case 0: //检查输入的密码是否正确
 378   2                  LcdClearScreen();
*** WARNING C206 IN LINE 378 OF MAIN.C: 'LcdClearScreen': missing function-prototype
 379   2                  if (CmpMemory(PswSet, PswBuf1, PSW_MAX_LEN))
 380   2                  {   //正确时显示解锁的提示
 381   3                                      StartMotor(90);
 382   3                                      j=3;
 383   3                      status = 4;  //进入解锁状态
 384   3                  }
 385   2                  else
 386   2                  {   //错误时显示已锁定的提示
 387   3                                      StartMotor(-90);
 388   3                                      j=4;
 389   3                      status = 5;  //进入锁定状态
 390   3                  }
 391   2                  break;
 392   2              case 1: //进入密码设置的确认步骤，即再输入一次密码
 393   2                          num=0;
 394   2                          ShowNumber1(num);
 395   2                          j=1;
 396   2                  PswCnt = 0;
 397   2                  status = 2;
 398   2                  break;
 399   2              case 2: //检查两次输入的密码是否一致
 400   2                  if (CmpMemory(PswBuf1, PswBuf2, PSW_MAX_LEN))
 401   2                  {   //一致时保存设置的密码
 402   3                                      num=0;
 403   3                              ShowNumber1(num);
 404   3                      CopyMemory(PswSet, PswBuf1, PSW_MAX_LEN);
 405   3                      SavePassword();
 406   3                      FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 407   3                                      j=2;
 408   3                      PswCnt = 0;
 409   3                      status = 0;  //进入密码输入状态
 410   3                  }
 411   2                  else
 412   2                  {   //不一致时提示密码设置失败
 413   3                      num=0;
 414   3                              ShowNumber1(num);
 415   3                                  j=1;
 416   3                      status = 3;  //进入密码设置失败状态
 417   3                  }
 418   2                  break;
 419   2              case 3: //重新提示设置密码，进入密码设置状态
 420   2                          num=0;
 421   2                          ShowNumber1(num);
 422   2                          j=0;
 423   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 424   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 8   

 425   2                  PswCnt = 0;
 426   2                  status = 1;
 427   2                  break;
 428   2              case 4: //重新设置即修改密码
 429   2                          num=0;
 430   2                          ShowNumber1(num);
 431   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 432   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 433   2                              j=0;
 434   2                  PswCnt = 0;
 435   2                  status = 1;
 436   2                  break;
 437   2              case 5: //重新输入密码
 438   2                         num=0;
 439   2                         ShowNumber1(num);
 440   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 441   2                              j=2;
 442   2                  PswCnt = 0;
 443   2                  status = 0;
 444   2                  break;
 445   2              default: //不予响应
 446   2                  break;
 447   2          }
 448   1      }
 449          /* Esc键动作函数 */
 450          void KeyEscAction()
 451          {
 452   1           static unsigned char i = 0; //动态扫描的索引
 453   1          switch (status)
 454   1          {
 455   2              case 0: //输入密码状态时，清空当前输入以重新开始
 456   2                          num=0;
 457   2                              ShowNumber1(num);
 458   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 459   2                              j=2;
 460   2                  PswCnt = 0;
 461   2                  break;
 462   2              case 1: //设置密码状态时，清空当前输入以重新开始
 463   2                      num=0;
 464   2                              ShowNumber1(num);
 465   2                          j=0;
 466   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 467   2                  PswCnt = 0;
 468   2                  break;
 469   2              case 2: //设置密码确认状态时，清空输入并返回密码设置
 470   2                          num=0;
 471   2                              ShowNumber1(num);
 472   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 473   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 474   2                              j=0;
 475   2                  PswCnt = 0;
 476   2                  status = 1;
 477   2                  break;
 478   2              default: //其它状态不予响应
 479   2                  break;
 480   2          }
 481   1      }
*** WARNING C280 IN LINE 452 OF MAIN.C: 'i': unreferenced local variable
 482          
 483          /* 电机转动控制函数 */
 484          void TurnMotor()
 485          {
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 9   

 486   1      unsigned char tmp; //临时变量
 487   1      static unsigned char index = 0; //节拍输出索引
 488   1      unsigned char code BeatCode[8] = { //步进电机节拍对应的 IO 控制代码
 489   1      0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 490   1      };
 491   1      if (beats != 0) //节拍数不为 0 则产生一个驱动节拍
 492   1      {
 493   2      if (beats > 0) //节拍数大于 0 时正转
 494   2      {
 495   3      index++; //正转时节拍输出索引递增
 496   3      index = index & 0x07; //用&操作实现到 8 归零
 497   3      beats--; //正转时节拍计数递减
 498   3      }
 499   2      else //节拍数小于 0 时反转
 500   2      {
 501   3      index--; //反转时节拍输出索引递减
 502   3      index = index & 0x07; //用&操作同样可以实现到-1 时归 7
 503   3      beats++; //反转时节拍计数递增
 504   3      }
 505   2      tmp = P3; //用 tmp 把 P1 口当前值暂存
 506   2      tmp = tmp & 0xF0; //用&操作清零低 4 位
 507   2      tmp = tmp | BeatCode[index]; //用|操作把节拍代码写到低 4 位
 508   2      P3= tmp; //把低 4 位的节拍代码和高 4 位的原值送回 P1
 509   2      }
 510   1      else //节拍数为 0 则关闭电机所有的相
 511   1      {
 512   2      P3 = P3 | 0x0F;
 513   2      }
 514   1      }
 515          
 516          
 517          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 518          void KeyAction(unsigned char keycode)
 519          {
 520   1          
 521   1              static unsigned int i=0;
 522   1          if  ((keycode>='0') && (keycode<='9'))  //输入字符
 523   1          {
 524   2              KeyNumAction(keycode);
 525   2                      num = (num*10)+(keycode-0x30); //整体十进制左移，新数字进入个位
 526   2                      ShowNumber(num); //运算结果显示到数码管
 527   2          }
 528   1          else if (keycode == 0x0D)  //回车键
 529   1          {
 530   2                  
 531   2              KeyEnterAction();
 532   2          }
 533   1          else if (keycode == 0x1B)  //Esc键
 534   1          {
 535   2              KeyEscAction();
 536   2          }
 537   1      }
*** WARNING C280 IN LINE 521 OF MAIN.C: 'i': unreferenced local variable
 538          /* 配置并启动T0，ms-T0定时时间 */
 539          void ConfigTimer0(unsigned int ms)
 540          {
 541   1          unsigned long tmp;  //临时变量
 542   1          
 543   1          tmp = 11059200 / 12;      //定时器计数频率
 544   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 545   1          tmp = 65536 - tmp;        //计算定时器重载值
 546   1          tmp = tmp + 28;           //补偿中断响应延时造成的误差
C51 COMPILER V9.01   MAIN                                                                  05/13/2018 13:33:43 PAGE 10  

 547   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 548   1          T0RL = (unsigned char)tmp;
 549   1          TMOD &= 0xF0;   //清零T0的控制位
 550   1          TMOD |= 0x01;   //配置T0为模式1
 551   1          TH0 = T0RH;     //加载T0重载值
 552   1          TL0 = T0RL;
 553   1          ET0 = 1;        //使能T0中断
 554   1          TR0 = 1;        //启动T0
 555   1      }
 556          /* T0中断服务函数，执行按键扫描 */
 557          void InterruptTimer0() interrupt 1
 558          {
 559   1          static bit div=0;
 560   1              static int n=90000;
 561   1          TH0 = T0RH;  //重新加载重载值
 562   1          TL0 = T0RL;
 563   1              LedScan(); //调用数码管显示扫描函数
 564   1          KeyScan();   //按键扫描
 565   1              switch(j)
 566   1              {
 567   2                 case 0:
 568   2             
 569   2                 LedScan1();
 570   2              break;
 571   2            case 1:
 572   2          
 573   2                 LedScan2();
 574   2                      break;
 575   2             case 2:
 576   2                LedScan3();
 577   2                      break;
 578   2                      case 3:
 579   2                 LedScan4();
 580   2                      break;
 581   2              case 4:
 582   2                 LedScan5();
 583   2                      break;
 584   2                      default:break;
 585   2                      }
 586   1              div = ~div;
 587   1         if (div == 1)
 588   1         {
 589   2            TurnMotor();
 590   2         }
 591   1      }
*** WARNING C280 IN LINE 560 OF MAIN.C: 'n': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2247    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     27    ----
   DATA SIZE        =     33      83
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
