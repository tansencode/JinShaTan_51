C51 COMPILER V9.01   MAIN                                                                  04/16/2018 12:49:31 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          sbit ADDR3 = P1^3;
   3          sbit ENLED = P1^4;
   4          sbit KEY1 = P2^4;
   5          sbit KEY2 = P2^5;
   6          sbit KEY3 = P2^6;
   7          sbit KEY4 = P2^7;
   8          unsigned char code LedChar[] = { //数码管显示字符转换表
   9          0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
  10          0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
  11          };
  12          unsigned char LedBuff[6] = { //数码管显示缓冲区
  13          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
  14          };
  15          
  16          unsigned char KeySta[4] = { //按键当前状态
  17          1, 1, 1, 1
  18          };
  19          bit StopwatchRunning = 0; //秒表运行标志
  20          bit StopwatchRefresh = 1; //秒表计数刷新标志
  21          unsigned char DecimalPart = 0; //秒表的小数部分
  22          unsigned int IntegerPart = 0; //秒表的整数部分
  23          unsigned char T0RH = 0; //T0 重载值的高字节
  24          unsigned char T0RL = 0; //T0 重载值的低字节
  25          void ConfigTimer0(unsigned int ms);
  26          void StopwatchDisplay();
  27          void KeyDriver();
  28          void main()
  29          {
  30   1      EA = 1; //开总中断
  31   1      ENLED = 0; //使能选择数码管
  32   1      ADDR3 = 1;
  33   1      P2 = 0xFE; //P2.0 置 0，选择第 4 行按键作为独立按键
  34   1      ConfigTimer0(2); //配置 T0 定时 2ms
  35   1      while (1)
  36   1      {
  37   2      if (StopwatchRefresh) //需要刷新秒表示数时调用显示函数
  38   2      {
  39   3      StopwatchRefresh = 0;
  40   3      StopwatchDisplay();
  41   3      }
  42   2      KeyDriver(); //调用按键驱动函数
  43   2      }
  44   1      }
  45          /* 配置并启动 T0，ms-T0 定时时间 */
  46          void ConfigTimer0(unsigned int ms)
  47          {
  48   1      unsigned long tmp; //临时变量
  49   1      tmp = 11059200 / 12; //定时器计数频率
  50   1      tmp = (tmp * ms) / 1000; //计算所需的计数值
  51   1      tmp = 65536 - tmp; //计算定时器重载值
  52   1      tmp = tmp + 18; //补偿中断响应延时造成的误差
  53   1      T0RH = (unsigned char)(tmp>>8); //定时器重载值拆分为高低字节
  54   1      T0RL = (unsigned char)tmp;
  55   1      TMOD &= 0xF0; //清零 T0 的控制位
C51 COMPILER V9.01   MAIN                                                                  04/16/2018 12:49:31 PAGE 2   

  56   1      TMOD |= 0x01; //配置 T0 为模式 1
  57   1      TH0 = T0RH; //加载 T0 重载值
  58   1      TL0 = T0RL;
  59   1      ET0 = 1; //使能 T0 中断
  60   1      TR0 = 1; //启动 T0
  61   1      }
  62          /* 秒表计数显示函数 */
  63          void StopwatchDisplay()
  64          {
  65   1      signed char i;
  66   1      unsigned char buf[4]; //数据转换的缓冲区
  67   1      //小数部分转换到低 2 位
  68   1      LedBuff[0] = LedChar[DecimalPart%10];
  69   1      LedBuff[1] = LedChar[DecimalPart/10];
  70   1      //整数部分转换到高 4 位
  71   1      buf[0] = IntegerPart%10;
  72   1      buf[1] = (IntegerPart/10)%10;
  73   1      buf[2] = (IntegerPart/100)%10;
  74   1      buf[3] = (IntegerPart/1000)%10;
  75   1      for (i=3; i>=1; i--) //整数部分高位的 0 转换为空字符
  76   1      {
  77   2      if (buf[i] == 0)
  78   2      LedBuff[i+2] = 0xFF;
  79   2      else
  80   2      break;
  81   2      }
  82   1      for ( ; i>=0; i--) //有效数字位转换为显示字符
  83   1      {
  84   2      LedBuff[i+2] = LedChar[buf[i]];
  85   2      }
  86   1      LedBuff[2] &= 0x7F; //点亮小数点
  87   1      }
  88          /* 秒表启停函数 */
  89          void StopwatchAction()
  90          {
  91   1      if (StopwatchRunning) //已启动则停止
  92   1      StopwatchRunning = 0;
  93   1      else //未启动则启动
  94   1      StopwatchRunning = 1;
  95   1      }
  96          /* 秒表复位函数 */
  97          void StopwatchReset()
  98          {
  99   1      StopwatchRunning = 0; //停止秒表
 100   1      DecimalPart = 0; //清零计数值
 101   1      IntegerPart = 0;
 102   1      StopwatchRefresh = 1; //置刷新标志
 103   1      }
 104          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 105          void KeyDriver()
 106          {
 107   1      unsigned char i;
 108   1      static unsigned char backup[4] = {1,1,1,1};
 109   1      for (i=0; i<4; i++) //循环检测 4 个按键
 110   1      {
 111   2      if (backup[i] != KeySta[i]) //检测按键动作
 112   2      {
 113   3      if (backup[i] != 0) //按键按下时执行动作
 114   3      {
 115   4      if (i == 1) //Esc 键复位秒表
 116   4      StopwatchReset();
 117   4      else if (i == 2) //回车键启停秒表
C51 COMPILER V9.01   MAIN                                                                  04/16/2018 12:49:31 PAGE 3   

 118   4      StopwatchAction();
 119   4      }
 120   3      backup[i] = KeySta[i]; //刷新前一次的备份值
 121   3      }
 122   2      }
 123   1      }
 124          /* 按键扫描函数，需在定时中断中调用 */
 125          void KeyScan()
 126          {
 127   1      unsigned char i;
 128   1      static unsigned char keybuf[4] = { //按键扫描缓冲区
 129   1      0xFF, 0xFF, 0xFF, 0xFF
 130   1      };
 131   1      //按键值移入缓冲区
 132   1      keybuf[0] = (keybuf[0] << 1) | KEY1;
 133   1      keybuf[1] = (keybuf[1] << 1) | KEY2;
 134   1      keybuf[2] = (keybuf[2] << 1) | KEY3;
 135   1      keybuf[3] = (keybuf[3] << 1) | KEY4;
 136   1      //消抖后更新按键状态
 137   1      for (i=0; i<4; i++)
 138   1      {
 139   2      if (keybuf[i] == 0x00)
 140   2      { //连续 8 次扫描值为 0，即 16ms 内都是按下状态时，可认为按键已稳定的按下
 141   3      KeySta[i] = 0;
 142   3      }
 143   2      else if (keybuf[i] == 0xFF)
 144   2      { //连续 8 次扫描值为 1，即 16ms 内都是弹起状态时，可认为按键已稳定的弹起
 145   3      KeySta[i] = 1;
 146   3      }
 147   2      }
 148   1      }
 149          /* 数码管动态扫描刷新函数，需在定时中断中调用 */
 150          void LedScan()
 151          {
 152   1      static unsigned char i = 0; //动态扫描索引
 153   1      P0 = 0xFF; //关闭所有段选位，显示消隐
 154   1      P1 = (P1 & 0xF8) | i; //位选索引值赋值到 P1 口低 3 位
 155   1      P0 = LedBuff[i]; //缓冲区中索引位置的数据送到 P0 口
 156   1      if (i < 5) //索引递增循环，遍历整个缓冲区
 157   1      i++;
 158   1      else
 159   1      i = 0;
 160   1      }
 161          /* 秒表计数函数，每隔 10ms 调用一次进行秒表计数累加 */
 162          void StopwatchCount()
 163          {
 164   1      if (StopwatchRunning) //当处于运行状态时递增计数值
 165   1      {
 166   2      DecimalPart++; //小数部分+1
 167   2      if (DecimalPart >= 100) //小数部分计到 100 时进位到整数部分
 168   2      {
 169   3      DecimalPart = 0;
 170   3      IntegerPart++; //整数部分+1
 171   3      if (IntegerPart >= 10000) //整数部分计到 10000 时归零
 172   3      {
 173   4      IntegerPart = 0;
 174   4      }
 175   3      }
 176   2      StopwatchRefresh = 1; //设置秒表计数刷新标志
 177   2      }
 178   1      }
 179          /* T0 中断服务函数，完成数码管、按键扫描与秒表计数 */
C51 COMPILER V9.01   MAIN                                                                  04/16/2018 12:49:31 PAGE 4   

 180          void InterruptTimer0() interrupt 1
 181          {
 182   1      static unsigned char tmr10ms = 0;
 183   1      TH0 = T0RH; //重新加载重载值
 184   1      TL0 = T0RL;
 185   1      LedScan(); //数码管扫描显示
 186   1      KeyScan(); //按键扫描
 187   1      //定时 10ms 进行一次秒表计数
 188   1      tmr10ms++;
 189   1      if (tmr10ms >= 5)
 190   1      {
 191   2      tmr10ms = 0;
 192   2      StopwatchCount(); //调用秒表计数函数
 193   2      }
 194   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    570    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
