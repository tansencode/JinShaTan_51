C51 COMPILER V9.01   KEYBOARD                                                              05/03/2018 12:09:56 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN ..\output\keyboard.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\source\keyboard.c BROWSE INCDIR(..\source) DEBUG OBJECTEXTEND PRINT(..\
                    -output\keyboard.lst) OBJECT(..\output\keyboard.obj)

line level    source

   1          /*
   2          *******************************************************************************
   3          *                     《手把手教你学51单片机(C语言版)》
   4          *                    配套 KST-51 单片机开发板 示例源代码
   5          *
   6          *         (c) 版权所有 2014 金沙滩工作室/清华大学出版社 保留所有权利
   7          *                 获取更多资料请访问：http://www.kingst.org
   8          *
   9          * 文件名：keyboard.c
  10          * 描  述：4*4矩阵按键驱动模块
  11          * 版本号：v1.0.0
  12          * 备  注：
  13          *******************************************************************************
  14          */
  15          
  16          #define  _KEY_BOARD_C
  17          #include "config.h"
  18          #include "keyboard.h"
  19          #include "Time.h"
  20          
  21          const uint8 code KeyCodeMap[4][4] = {  //矩阵按键到标准键码的映射表
  22              { '1',  '2',  '3', 0x26 },  //数字键1、数字键2、数字键3、向上键
  23              { '4',  '5',  '6', 0x25 },  //数字键4、数字键5、数字键6、向左键
  24              { '7',  '8',  '9', 0x28 },  //数字键7、数字键8、数字键9、向下键
  25              { '0', 0x1B, 0x0D, 0x27 }   //数字键0、ESC键、  回车键、 向右键
  26          };
  27          uint8 pdata KeySta[4][4] = {  //全部矩阵按键的当前状态
  28              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  29          };
  30          
  31          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
  32          void KeyDriver()
  33          {
  34   1          uint8 i, j;
  35   1          static uint8 pdata backup[4][4] = {  //按键值备份，保存前一次的值
  36   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  37   1          };
  38   1          
  39   1          for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
  40   1          {
  41   2              for (j=0; j<4; j++)
  42   2              {
  43   3                  if (backup[i][j] != KeySta[i][j])    //检测按键动作
  44   3                  {
  45   4                      if (backup[i][j] != 0)           //按键按下时执行动作
  46   4                      {
  47   5                          KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
  48   5                      }
  49   4                      backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
  50   4                  }
  51   3              }
  52   2          }
  53   1      }
  54          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
C51 COMPILER V9.01   KEYBOARD                                                              05/03/2018 12:09:56 PAGE 2   

  55          void KeyScan()
  56          {
  57   1          uint8 i;
  58   1          static uint8 keyout = 0;   //矩阵按键扫描输出索引
  59   1          static uint8 keybuf[4][4] = {  //矩阵按键扫描缓冲区
  60   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
  61   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
  62   1          };
  63   1      
  64   1          //将一行的4个按键值移入缓冲区
  65   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
  66   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
  67   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
  68   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
  69   1          //消抖后更新按键状态
  70   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
  71   1          {
  72   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
  73   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
  74   3                  KeySta[keyout][i] = 0;
  75   3              }
  76   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
  77   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
  78   3                  KeySta[keyout][i] = 1;
  79   3              }
  80   2          }
  81   1          //执行下一次的扫描输出
  82   1          keyout++;        //输出索引递增
  83   1          keyout &= 0x03;  //索引值加到4即归零
  84   1          switch (keyout)  //根据索引值，释放当前输出引脚，拉低下次的输出引脚
  85   1          {
  86   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
  87   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
  88   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
  89   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
  90   2              default: break;
  91   2          }
  92   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     32    ----
   DATA SIZE        =     17       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
