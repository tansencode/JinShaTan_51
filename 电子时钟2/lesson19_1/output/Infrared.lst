C51 COMPILER V9.01   INFRARED                                                              05/03/2018 12:09:57 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE INFRARED
OBJECT MODULE PLACED IN ..\output\Infrared.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\source\Infrared.c BROWSE INCDIR(..\source) DEBUG OBJECTEXTEND PRINT(..\
                    -output\Infrared.lst) OBJECT(..\output\Infrared.obj)

line level    source

   1          /*
   2          *******************************************************************************
   3          *                     《手把手教你学51单片机(C语言版)》
   4          *                    配套 KST-51 单片机开发板 示例源代码
   5          *
   6          *         (c) 版权所有 2014 金沙滩工作室/清华大学出版社 保留所有权利
   7          *                 获取更多资料请访问：http://www.kingst.org
   8          *
   9          * 文件名：Infrared.c
  10          * 描  述：采用NEC编码协议的红外遥控驱动模块
  11          * 版本号：v1.0.0
  12          * 备  注：不同遥控器的键码值可能不同，如需确认每个键的键码值可使用lesson16_1的
  13          *         示例程序（数码管右端显示的数值即是键码值，十六进制格式显示）。
  14          *******************************************************************************
  15          */
  16          
  17          #define  _INFRARED_C
  18          #include "config.h"
  19          #include "Infrared.h"
  20          #include "Time.h"
  21          
  22          const uint8 code IrCodeMap[][2] = {  //红外键码到标准PC键码的映射表
  23              {0x45,0x00}, {0x46,0x00}, {0x47,0x1B}, //开关->无  Mode->无   静音->ESC
  24              {0x44,0x00}, {0x40,0x25}, {0x43,0x27}, //播放->无  后退->向左 前进->向右
  25              {0x07,0x00}, {0x15,0x28}, {0x09,0x26}, // EQ->无   减号->向下 加号->向上
  26              {0x16, '0'}, {0x19,0x1B}, {0x0D,0x0D}, //'0'->'0'  箭头->ESC  U/SD->回车
  27              {0x0C, '1'}, {0x18, '2'}, {0x5E, '3'}, //'1'->'1'  '2'->'2'   '3'->'3'
  28              {0x08, '4'}, {0x1C, '5'}, {0x5A, '6'}, //'4'->'4'  '5'->'5'   '6'->'6'
  29              {0x42, '7'}, {0x52, '8'}, {0x4A, '9'}, //'7'->'7'  '6'->'8'   '9'->'9'
  30          };
  31          
  32          bit irflag = 0;   //红外接收标志，收到一帧正确数据后置1
  33          uint8 ircode[4];  //红外代码接收缓冲区
  34          
  35          /* 红外接收驱动，检测接收到的键码，调度相应动作函数 */
  36          void InfraredDriver()
  37          {
  38   1          uint8 i;
  39   1          
  40   1          if (irflag)
  41   1          {
  42   2              irflag = 0;
  43   2              for (i=0; i<sizeof(IrCodeMap)/sizeof(IrCodeMap[0]); i++) //遍历映射表
  44   2              {
  45   3                  if (ircode[2] == IrCodeMap[i][0])  //在表中找到当前接收的键码后，
  46   3                  {                                  //用对应的映射码执行函数调度，
  47   4                      KeyAction(IrCodeMap[i][1]);    //直接调用按键动作函数即可。
  48   4                      break;
  49   4                  }
  50   3              }
  51   2          }
  52   1      }
  53          /* 初始化红外接收功能 */
  54          void InitInfrared()
C51 COMPILER V9.01   INFRARED                                                              05/03/2018 12:09:57 PAGE 2   

  55          {
  56   1          IR_INPUT = 1;  //确保红外接收引脚被释放
  57   1          TMOD &= 0x0F;  //清零T1的控制位
  58   1          TMOD |= 0x10;  //配置T1为模式1
  59   1          TR1 = 0;       //停止T1计数
  60   1          ET1 = 0;       //禁止T1中断
  61   1          IT1 = 1;       //设置INT1为负边沿触发
  62   1          EX1 = 1;       //使能INT1中断
  63   1      }
  64          /* 获取当前高电平的持续时间 */
  65          uint16 GetHighTime()
  66          {
  67   1          TH1 = 0;  //清零T1计数初值
  68   1          TL1 = 0;
  69   1          TR1 = 1;  //启动T1计数
  70   1          while (IR_INPUT)  //红外输入引脚为1时循环检测等待，变为0时则结束本循环
  71   1          {
  72   2              if (TH1 >= 0x40)
  73   2              {            //当T1计数值大于0x4000，即高电平持续时间超过约18ms时，
  74   3                  break;   //强制退出循环，是为了避免信号异常时，程序假死在这里。
  75   3              }
  76   2          }
  77   1          TR1 = 0;  //停止T1计数
  78   1      
  79   1          return (TH1*256 + TL1);  //T1计数值合成为16bit整型数，并返回该数
  80   1      }
  81          /* 获取当前低电平的持续时间 */
  82          uint16 GetLowTime()
  83          {
  84   1          TH1 = 0;  //清零T1计数初值
  85   1          TL1 = 0;
  86   1          TR1 = 1;  //启动T1计数
  87   1          while (!IR_INPUT)  //红外输入引脚为0时循环检测等待，变为1时则结束本循环
  88   1          {
  89   2              if (TH1 >= 0x40)
  90   2              {            //当T1计数值大于0x4000，即低电平持续时间超过约18ms时，
  91   3                  break;   //强制退出循环，是为了避免信号异常时，程序假死在这里。
  92   3              }
  93   2          }
  94   1          TR1 = 0;  //停止T1计数
  95   1      
  96   1          return (TH1*256 + TL1);  //T1计数值合成为16bit整型数，并返回该数
  97   1      }
  98          /* INT1中断服务函数，执行红外接收及解码 */
  99          void EXINT1_ISR() interrupt 2
 100          {
 101   1          uint8 i, j;
 102   1          uint8 byt;
 103   1          uint16 time;
 104   1          
 105   1          //接收并判定引导码的9ms低电平
 106   1          time = GetLowTime();
 107   1          if ((time<7833) || (time>8755))  //时间判定范围为8.5～9.5ms，
 108   1          {                                //超过此范围则说明为误码，直接退出
 109   2              IE1 = 0;   //退出前清零INT1中断标志
 110   2              return;
 111   2          }
 112   1          //接收并判定引导码的4.5ms高电平
 113   1          time = GetHighTime();
 114   1          if ((time<3686) || (time>4608))  //时间判定范围为4.0～5.0ms，
 115   1          {                                //超过此范围则说明为误码，直接退出
 116   2              IE1 = 0;
C51 COMPILER V9.01   INFRARED                                                              05/03/2018 12:09:57 PAGE 3   

 117   2              return;
 118   2          }
 119   1          //接收并判定后续的4字节数据
 120   1          for (i=0; i<4; i++)  //循环接收4个字节
 121   1          {
 122   2              for (j=0; j<8; j++)  //循环接收判定每字节的8个bit
 123   2              {
 124   3                  //接收判定每bit的560us低电平
 125   3                  time = GetLowTime();
 126   3                  if ((time<313) || (time>718)) //时间判定范围为340～780us，
 127   3                  {                             //超过此范围则说明为误码，直接退出
 128   4                      IE1 = 0;
 129   4                      return;
 130   4                  }
 131   3                  //接收每bit高电平时间，判定该bit的值
 132   3                  time = GetHighTime();
 133   3                  if ((time>313) && (time<718)) //时间判定范围为340～780us，
 134   3                  {                             //在此范围内说明该bit值为0
 135   4                      byt >>= 1;   //因低位在先，所以数据右移，高位为0
 136   4                  }
 137   3                  else if ((time>1345) && (time<1751)) //时间判定范围为1460～1900us，
 138   3                  {                                    //在此范围内说明该bit值为1
 139   4                      byt >>= 1;   //因低位在先，所以数据右移，
 140   4                      byt |= 0x80; //高位置1
 141   4                  }
 142   3                  else  //不在上述范围内则说明为误码，直接退出
 143   3                  {
 144   4                      IE1 = 0;
 145   4                      return;
 146   4                  }
 147   3              }
 148   2              ircode[i] = byt;  //接收完一个字节后保存到缓冲区
 149   2          }
 150   1          irflag = 1;  //接收完毕后设置标志
 151   1          IE1 = 0;     //退出前清零INT1中断标志
 152   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    340    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
