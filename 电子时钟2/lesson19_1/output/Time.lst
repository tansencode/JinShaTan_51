C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TIME
OBJECT MODULE PLACED IN ..\output\Time.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\source\Time.c BROWSE INCDIR(..\source) DEBUG OBJECTEXTEND PRINT(..\outp
                    -ut\Time.lst) OBJECT(..\output\Time.obj)

line level    source

   1          /*
   2          *******************************************************************************
   3          *                     《手把手教你学51单片机(C语言版)》
   4          *                    配套 KST-51 单片机开发板 示例源代码
   5          *
   6          *         (c) 版权所有 2014 金沙滩工作室/清华大学出版社 保留所有权利
   7          *                 获取更多资料请访问：http://www.kingst.org
   8          *
   9          * 文件名：Time.c
  10          * 描  述：第19章 多功能电子钟 主要功能文件
  11          * 版本号：v1.0.0
  12          * 备  注：详情见第19章19.4节
  13          *******************************************************************************
  14          */
  15          
  16          #define  _TIME_C
  17          #include "config.h"
  18          #include "DS1302.h"
  19          #include "LedBuzzer.h"
  20          #include "Lcd1602.h"
  21          #include "Time.h"
  22          #include "main.h"
  23          
  24          uint8 code WeekMod[] = {  //星期X字符图片表
  25              0xFF, 0x99, 0x00, 0x00, 0x00, 0x81, 0xC3, 0xE7,  //星期日(红心)
  26              0xEF, 0xE7, 0xE3, 0xE7, 0xE7, 0xE7, 0xE7, 0xC3,  //星期1
  27              0xC3, 0x81, 0x9D, 0x87, 0xC3, 0xF9, 0xC1, 0x81,  //星期2
  28              0xC3, 0x81, 0x9D, 0xC7, 0xC7, 0x9D, 0x81, 0xC3,  //星期3
  29              0xCF, 0xC7, 0xC3, 0xC9, 0xC9, 0x81, 0xCF, 0xCF,  //星期4
  30              0x81, 0xC1, 0xF9, 0xC3, 0x87, 0x9D, 0x81, 0xC3,  //星期5
  31              0xC3, 0x81, 0xF9, 0xC3, 0x81, 0x99, 0x81, 0xC3,  //星期6
  32          };
  33          
  34          bit staMute = 0;  //静音标志位
  35          uint8 AlarmHour = 0x07;  //闹钟时间的小时数
  36          uint8 AlarmMin  = 0x30;  //闹钟时间的分钟数
  37          struct sTime CurTime;    //当前日期时间
  38          
  39          uint8 SetIndex = 0;  //设置位索引
  40          uint8 pdata SetAlarmHour;    //闹钟小时数设置缓冲
  41          uint8 pdata SetAlarmMin;     //闹钟分钟数设置缓冲
  42          struct sTime pdata SetTime;  //日期时间设置缓冲区
  43          
  44          /* 获取当前日期时间，并刷新时间和星期的显示 */
  45          void RefreshTime()
  46          {
  47   1          GetRealTime(&CurTime);                  //获取当前日期时间
  48   1          ShowLedNumber(5, CurTime.hour>>4, 0);   //时
  49   1          ShowLedNumber(4, CurTime.hour&0xF,1);
  50   1          ShowLedNumber(3, CurTime.min>>4,  0);   //分
  51   1          ShowLedNumber(2, CurTime.min&0xF, 1);
  52   1          ShowLedNumber(1, CurTime.sec>>4,  0);   //秒
  53   1          ShowLedNumber(0, CurTime.sec&0xF, 0);
  54   1          ShowLedArray(WeekMod + CurTime.week*8); //星期
C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 2   

  55   1      }
  56          /* 日期刷新函数，ops-刷新选项：为0时只当日期变化才刷新，非0则立即刷新 */
  57          void RefreshDate(uint8 ops)
  58          {
  59   1          uint8 pdata str[12];
  60   1          static uint8 backup = 0;
  61   1          
  62   1          if ((backup!=CurTime.day) || (ops!=0))
  63   1          {
  64   2              str[0] = ((CurTime.year>>12) & 0xF) + '0';  //4位数年份
  65   2              str[1] = ((CurTime.year>>8) & 0xF) + '0';
  66   2              str[2] = ((CurTime.year>>4) & 0xF) + '0';
  67   2              str[3] = (CurTime.year & 0xF) + '0';
  68   2              str[4] = '-';                        //分隔符
  69   2              str[5] = (CurTime.mon >> 4) + '0';   //月份
  70   2              str[6] = (CurTime.mon & 0xF) + '0';
  71   2              str[7] = '-';                        //分隔符
  72   2              str[8] = (CurTime.day >> 4) + '0';   //日期
  73   2              str[9] = (CurTime.day & 0xF) + '0';
  74   2              str[10] = '\0';         //字符串结束符
  75   2              LcdShowStr(0, 0, str);  //显示到液晶上
  76   2              backup = CurTime.day;   //刷新上次日期值
  77   2          }
  78   1      }
  79          /* 刷新闹钟时间的显示 */
  80          void RefreshAlarm()
  81          {
  82   1          uint8 pdata str[8];
  83   1          
  84   1          LcdShowStr(0, 1, "Alarm at ");     //显示提示标题
  85   1          str[0] = (AlarmHour >> 4) + '0';   //闹钟小时数
  86   1          str[1] = (AlarmHour & 0xF) + '0';
  87   1          str[2] = ':';                      //分隔符
  88   1          str[3] = (AlarmMin >> 4) + '0';    //闹钟分钟数
  89   1          str[4] = (AlarmMin & 0xF) + '0';
  90   1          str[5] = '\0';                     //字符串结束符
  91   1          LcdShowStr(9, 1, str);             //显示到液晶上
  92   1      }
  93          /* 闹钟监控函数，抵达设定的闹钟时间时执行闹铃 */
  94          void AlarmMonitor()
  95          {
  96   1          if ((CurTime.hour==AlarmHour) && (CurTime.min==AlarmMin)) //检查时间匹配
  97   1          {
  98   2              if (!staMute)  //检查是否静音
  99   2                  staBuzzer = ~staBuzzer;  //实现蜂鸣器断续鸣叫
 100   2              else
 101   2                  staBuzzer = 0;
 102   2          }
 103   1          else
 104   1          {
 105   2              staMute = 0;
 106   2              staBuzzer = 0;
 107   2          }
 108   1      }
 109          /* 将设置时间及标题提示显示到液晶上 */
 110          void ShowSetTime()
 111          {
 112   1          uint8 pdata str[18];
 113   1          
 114   1          str[0]  = ((SetTime.year>>4) & 0xF) + '0';  //2位数年份
 115   1          str[1]  = (SetTime.year & 0xF) + '0';
 116   1          str[2]  = '-';
C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 3   

 117   1          str[3]  = (SetTime.mon >> 4) + '0';   //月份
 118   1          str[4]  = (SetTime.mon & 0xF) + '0';
 119   1          str[5]  = '-';
 120   1          str[6]  = (SetTime.day >> 4) + '0';   //日期
 121   1          str[7]  = (SetTime.day & 0xF) + '0';
 122   1          str[8]  = '-';
 123   1          str[9]  = (SetTime.week & 0xF) + '0'; //星期
 124   1          str[10] = ' ';
 125   1          str[11] = (SetTime.hour >> 4) + '0';  //小时
 126   1          str[12] = (SetTime.hour & 0xF) + '0';
 127   1          str[13] = ':';
 128   1          str[14] = (SetTime.min >> 4) + '0';   //分钟
 129   1          str[15] = (SetTime.min & 0xF) + '0';
 130   1          str[16] = '\0';
 131   1          LcdShowStr(0, 0, "Set Date Time");  //显示提示标题
 132   1          LcdShowStr(0, 1, str);              //显示设置时间值
 133   1      }
 134          /* 将设置闹钟及标题提示显示到液晶上 */
 135          void ShowSetAlarm()
 136          {
 137   1          uint8 pdata str[8];
 138   1          
 139   1          str[0] = (SetAlarmHour >> 4) + '0';   //小时
 140   1          str[1] = (SetAlarmHour & 0xF) + '0';
 141   1          str[2] = ':';
 142   1          str[3] = (SetAlarmMin >> 4) + '0';    //分钟
 143   1          str[4] = (SetAlarmMin & 0xF) + '0';
 144   1          str[5] = '\0';
 145   1          LcdShowStr(0, 0, "Set Alarm");  //显示提示标题
 146   1          LcdShowStr(0, 1, str);          //显示设定闹钟值
 147   1      }
 148          /* 取消当前设置，返回正常运行状态 */
 149          void CancelCurSet()
 150          {
 151   1          staSystem = E_NORMAL;
 152   1          LcdCloseCursor();  //关闭光标
 153   1          LcdClearScreen();  //液晶清屏
 154   1          RefreshTime();   //刷新当前时间
 155   1          RefreshDate(1);  //立即刷新日期显示
 156   1          RefreshTemp(1);  //立即刷新温度显示
 157   1          RefreshAlarm();  //闹钟设定值显示
 158   1      }
 159          /* 时间或闹钟设置时，设置位右移一位，到头后折回 */
 160          void SetRightShift()
 161          {
 162   1          if (staSystem == E_SET_TIME)
 163   1          {
 164   2              switch (SetIndex)
 165   2              {
 166   3                  case 0: SetIndex=1;  LcdSetCursor(1, 1); break;
 167   3                  case 1: SetIndex=2;  LcdSetCursor(3, 1); break;
 168   3                  case 2: SetIndex=3;  LcdSetCursor(4, 1); break;
 169   3                  case 3: SetIndex=4;  LcdSetCursor(6, 1); break;
 170   3                  case 4: SetIndex=5;  LcdSetCursor(7, 1); break;
 171   3                  case 5: SetIndex=6;  LcdSetCursor(9, 1); break;
 172   3                  case 6: SetIndex=7;  LcdSetCursor(11,1); break;
 173   3                  case 7: SetIndex=8;  LcdSetCursor(12,1); break;
 174   3                  case 8: SetIndex=9;  LcdSetCursor(14,1); break;
 175   3                  case 9: SetIndex=10; LcdSetCursor(15,1); break;
 176   3                  default: SetIndex=0; LcdSetCursor(0, 1); break;
 177   3              }
 178   2          }
C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 4   

 179   1          else if (staSystem == E_SET_ALARM)
 180   1          {
 181   2              switch (SetIndex)
 182   2              {
 183   3                  case 0: SetIndex=1;  LcdSetCursor(1,1); break;
 184   3                  case 1: SetIndex=2;  LcdSetCursor(3,1); break;
 185   3                  case 2: SetIndex=3;  LcdSetCursor(4,1); break;
 186   3                  default: SetIndex=0; LcdSetCursor(0,1); break;
 187   3              }
 188   2          }
 189   1      }
 190          /* 时间或闹钟设置时，设置位左移一位，到头后折回 */
 191          void SetLeftShift()
 192          {
 193   1          if (staSystem == E_SET_TIME)
 194   1          {
 195   2              switch (SetIndex)
 196   2              {
 197   3                  case 0: SetIndex=10; LcdSetCursor(15,1); break;
 198   3                  case 1: SetIndex=0;  LcdSetCursor(0, 1); break;
 199   3                  case 2: SetIndex=1;  LcdSetCursor(1, 1); break;
 200   3                  case 3: SetIndex=2;  LcdSetCursor(3, 1); break;
 201   3                  case 4: SetIndex=3;  LcdSetCursor(4, 1); break;
 202   3                  case 5: SetIndex=4;  LcdSetCursor(6, 1); break;
 203   3                  case 6: SetIndex=5;  LcdSetCursor(7, 1); break;
 204   3                  case 7: SetIndex=6;  LcdSetCursor(9, 1); break;
 205   3                  case 8: SetIndex=7;  LcdSetCursor(11,1); break;
 206   3                  case 9: SetIndex=8;  LcdSetCursor(12,1); break;
 207   3                  default: SetIndex=9; LcdSetCursor(14,1); break;
 208   3              }
 209   2          }
 210   1          else if (staSystem == E_SET_ALARM)
 211   1          {
 212   2              switch (SetIndex)
 213   2              {
 214   3                  case 0: SetIndex=3;  LcdSetCursor(4,1); break;
 215   3                  case 1: SetIndex=0;  LcdSetCursor(0,1); break;
 216   3                  case 2: SetIndex=1;  LcdSetCursor(1,1); break;
 217   3                  default: SetIndex=2; LcdSetCursor(3,1); break;
 218   3              }
 219   2          }
 220   1      }
 221          /* 输入设置数字，修改对应的设置位，并显示该数字，ascii-输入数字的ASCII码 */
 222          void InputSetNumber(uint8 ascii)
 223          {
 224   1          uint8 num;
 225   1          
 226   1          num = ascii - '0';
 227   1          if (num <= 9)  //只响应0～9的数字
 228   1          {
 229   2              if (staSystem == E_SET_TIME)
 230   2              {
 231   3                  switch (SetIndex)
 232   3                  {
 233   4                      case 0: SetTime.year = (SetTime.year&0xFF0F)|(num<<4);
 234   4                              LcdShowChar(0, 1, ascii);  break;      //年份高位数字
 235   4                      case 1: SetTime.year = (SetTime.year&0xFFF0)|(num);
 236   4                              LcdShowChar(1, 1, ascii);  break;      //年份低位数字
 237   4                      case 2: SetTime.mon = (SetTime.mon&0x0F)|(num<<4);
 238   4                              LcdShowChar(3, 1, ascii);  break;      //月份高位数字
 239   4                      case 3: SetTime.mon = (SetTime.mon&0xF0)|(num);
 240   4                              LcdShowChar(4, 1, ascii);  break;      //月份低位数字
C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 5   

 241   4                      case 4: SetTime.day = (SetTime.day&0x0F)|(num<<4);
 242   4                              LcdShowChar(6, 1, ascii);  break;      //日期高位数字
 243   4                      case 5: SetTime.day = (SetTime.day&0xF0)|(num);
 244   4                              LcdShowChar(7, 1, ascii);  break;      //日期低位数字
 245   4                      case 6: SetTime.week = (SetTime.week&0xF0)|(num);
 246   4                              LcdShowChar(9, 1, ascii);  break;      //星期数字
 247   4                      case 7: SetTime.hour = (SetTime.hour&0x0F)|(num<<4);
 248   4                              LcdShowChar(11,1, ascii);  break;      //小时高位数字
 249   4                      case 8: SetTime.hour = (SetTime.hour&0xF0)|(num);
 250   4                              LcdShowChar(12,1, ascii);  break;      //小时低位数字
 251   4                      case 9: SetTime.min = (SetTime.min&0x0F)|(num<<4);
 252   4                              LcdShowChar(14,1, ascii);  break;      //分钟高位数字
 253   4                      default:SetTime.min = (SetTime.min&0xF0)|(num);
 254   4                              LcdShowChar(15,1, ascii);  break;      //分钟低位数字
 255   4                  }
 256   3                  SetRightShift();  //完成该位设置后自动右移
 257   3              }
 258   2              else if (staSystem == E_SET_ALARM)
 259   2              {
 260   3                  switch (SetIndex)
 261   3                  {
 262   4                      case 0: SetAlarmHour = (SetAlarmHour&0x0F) | (num<<4);
 263   4                              LcdShowChar(0,1, ascii); break;      //小时高位数字
 264   4                      case 1: SetAlarmHour = (SetAlarmHour&0xF0) | (num);
 265   4                              LcdShowChar(1,1, ascii); break;      //小时低位数字
 266   4                      case 2: SetAlarmMin = (SetAlarmMin&0x0F) | (num<<4);
 267   4                              LcdShowChar(3,1, ascii); break;      //分钟高位数字
 268   4                      default:SetAlarmMin = (SetAlarmMin&0xF0) | (num);
 269   4                              LcdShowChar(4,1, ascii); break;      //分钟低位数字
 270   4                  }
 271   3                  SetRightShift();  //完成该位设置后自动右移
 272   3              }
 273   2          }
 274   1      }
 275          /* 切换系统运行状态 */
 276          void SwitchSystemSta()
 277          {
 278   1          if (staSystem == E_NORMAL)  //正常运行切换到时间设置
 279   1          {
 280   2              staSystem = E_SET_TIME;
 281   2              SetTime.year = CurTime.year;  //当前时间拷贝到时间设置缓冲区中
 282   2              SetTime.mon  = CurTime.mon;
 283   2              SetTime.day  = CurTime.day;
 284   2              SetTime.hour = CurTime.hour;
 285   2              SetTime.min  = CurTime.min;
 286   2              SetTime.sec  = CurTime.sec;
 287   2              SetTime.week = CurTime.week;
 288   2              LcdClearScreen();  //液晶清屏
 289   2              ShowSetTime();     //显示设置时间
 290   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 291   2              SetRightShift();
 292   2              LcdOpenCursor();   //开启光标
 293   2          }
 294   1          else if (staSystem == E_SET_TIME)  //时间设置切换到闹钟设置
 295   1          {
 296   2              staSystem = E_SET_ALARM;
 297   2              SetTime.sec = 0;          //秒清零，即当设置时间后从0秒开始走时
 298   2              SetRealTime(&SetTime);    //设定时间写入实时时钟
 299   2              SetAlarmHour = AlarmHour; //当前闹钟值拷贝到设置缓冲区
 300   2              SetAlarmMin  = AlarmMin;
 301   2              LcdClearScreen();  //液晶清屏
 302   2              ShowSetAlarm();    //显示设置闹钟
C51 COMPILER V9.01   TIME                                                                  05/03/2018 12:09:58 PAGE 6   

 303   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 304   2              SetRightShift();
 305   2          }
 306   1          else  //闹钟设置切换会正常运行
 307   1          {
 308   2              staSystem = E_NORMAL;
 309   2              AlarmHour = SetAlarmHour;  //设定的闹钟值写入闹钟时间
 310   2              AlarmMin  = SetAlarmMin;
 311   2              LcdCloseCursor();  //关闭光标
 312   2              LcdClearScreen();  //液晶清屏
 313   2              RefreshTime();   //刷新当前时间
 314   2              RefreshDate(1);  //立即刷新日期显示
 315   2              RefreshTemp(1);  //立即刷新温度显示
 316   2              RefreshAlarm();  //闹钟设定值显示
 317   2          }
 318   1      }
 319          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 320          void KeyAction(uint8 keycode)
 321          {
 322   1          if  ((keycode>='0') && (keycode<='9'))  //数字键输入当前位设定值
 323   1          {
 324   2              InputSetNumber(keycode);
 325   2          }
 326   1          else if (keycode == 0x25)  //向左键，向左切换设置位
 327   1          {
 328   2              SetLeftShift();
 329   2          }
 330   1          else if (keycode == 0x27)  //向右键，向右切换设置位
 331   1          {
 332   2              SetRightShift();
 333   2          }
 334   1          else if (keycode == 0x0D)  //回车键，切换运行状态/保存设置
 335   1          {
 336   2              SwitchSystemSta();
 337   2          }
 338   1          else if (keycode == 0x1B)  //Esc键，静音/取消当前设置
 339   1          {
 340   2              if (staSystem == E_NORMAL) //处于正常运行状态时闹铃静音
 341   2              {
 342   3                  staMute = 1;
 343   3              }
 344   2              else                       //处于设置状态时退出设置
 345   2              {
 346   3                  CancelCurSet();
 347   3              }
 348   2          }
 349   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1548    ----
   CONSTANT SIZE    =     90    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10      46
   DATA SIZE        =     12       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
