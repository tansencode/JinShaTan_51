C51 COMPILER V9.01   MAIN                                                                  06/07/2018 16:28:46 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          sbit ADDR0 = P1^0;      //定义led使能端及位选端
   3          sbit ADDR1 = P1^1;
   4          sbit ADDR2 = P1^2;
   5          sbit ADDR3 = P1^3;
   6          sbit ENLED = P1^4;
   7          
   8          sbit Buzz=P1^6;   //蜂鸣器控制引脚
   9          bit flagBuzzon=0;
  10          sbit KEY_IN_1  = P2^4;  //按键控制引脚
  11          sbit KEY_IN_2  = P2^5;
  12          sbit KEY_IN_3  = P2^6;
  13          sbit KEY_IN_4  = P2^7;
  14          sbit KEY_OUT_1 = P2^3;
  15          sbit KEY_OUT_2 = P2^2;
  16          sbit KEY_OUT_3 = P2^1;
  17          sbit KEY_OUT_4 = P2^0;
  18          
  19          
  20          
  21          typedef unsigned int u16;         //对数据类型进行声明定义
  22          typedef unsigned char u8;
  23          unsigned char i=0;
  24          unsigned int j=0;
  25          static unsigned int cnt=0;
  26          unsigned char T0RH=0;
  27          unsigned char T0RL=0;
  28          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
  29          
  30          void ConfigTimer0(unsigned int ms);
  31          
  32          
  33          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  34              { 0x31, 0x32, 0x33, 0x26 }, //数字键1、数字键2、数字键3、向上键
  35              { 0x34, 0x35, 0x36, 0x25 }, //数字键4、数字键5、数字键6、向左键
  36              { 0x37, 0x38, 0x39, 0x28 }, //数字键7、数字键8、数字键9、向下键
  37              { 0x30, 0x1B, 0x0D, 0x27 }  //数字键0、ESC键、  回车键、 向右键
  38          };
  39          unsigned char KeySta[4][4] = {  //全部矩阵按键的当前状态
  40              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  41          };
  42          
  43          unsigned long pdata KeyDownTime[4][4]={
  44          {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}
  45          };
  46          void KeyDriver();
  47          
  48          void main()
  49          {
  50   1          unsigned char psec=0xAA;  
  51   1          EA = 1;       //使能总中断
  52   1              TMOD = 0x01; //设置 T0 为模式 1
  53   1          TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  54   1          TL0 = 0x67;
  55   1          ET0 = 1; //使能 T0 中断
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 16:28:46 PAGE 2   

  56   1          TR0 = 1; //启动 T0
  57   1              ConfigTimer0(1); //配置 T0 定时 1ms
  58   1          while (1)
  59   1          {
  60   2              KeyDriver();   //调用按键驱动函数
  61   2                      UartDriver(); //调用串口驱动
*** WARNING C206 IN LINE 61 OF MAIN.C: 'UartDriver': missing function-prototype
  62   2          }
  63   1      }
  64          
  65          void ledon()            //LED亮与灭控制函数
  66          {
  67   1          EA = 1;       //使能总中断
  68   1          ENLED = 0;    
  69   1          ADDR3 = 1;
  70   1              ADDR2=1;
  71   1              ADDR1=1;
  72   1              ADDR0=0;
  73   1              switch(i)
  74   1              {
  75   2                   case 0:P0=0xfe;i++;break;
  76   2                       case 1:P0=0xff;i=0;break;
  77   2                       default:break;
  78   2              }
  79   1      
  80   1      }
  81          
  82          
  83          void delay(u16 j)
  84          {
  85   1              while(j--);     
  86   1      }
  87          
  88          void buzz()       //蜂鸣器启动和停止控制函数
  89          {
  90   1              switch(cnt)
  91   1              {
  92   2             case 0:
  93   2                 flagBuzzon=1;  //蜂鸣器开启
  94   2                       ++cnt;
  95   2                         break;
  96   2                      case 1:
  97   2                        flagBuzzon=0;    //蜂鸣器关闭
  98   2                         cnt=0;
  99   2                         break;
 100   2                       default:break;        
 101   2              }
 102   1      }
 103          
 104          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 105          void KeyAction(unsigned char keycode)
 106          {
 107   1           if (keycode == 0x31 )  //K1按键控制蜂鸣器启动和停止
 108   1          {  
 109   2      
 110   2                 buzz();
 111   2                 
 112   2          }
 113   1          else if (keycode == 0x32 )  //K2按键控制led1亮和灭
 114   1          {
 115   2              
 116   2                      ledon();
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 16:28:46 PAGE 3   

 117   2                      
 118   2          }
 119   1      }
 120          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 121          void KeyDriver()
 122          {
 123   1          unsigned char i, j;
 124   1          static unsigned char backup[4][4] = {  //按键值备份，保存前一次的值
 125   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
 126   1          };
 127   1          
 128   1          for (i=0; i<4; i++)  //循环检测4*4的矩阵按键
 129   1          {
 130   2              for (j=0; j<4; j++)
 131   2              {
 132   3                  if (backup[i][j] != KeySta[i][j])    //检测按键动作
 133   3                  {
 134   4                      if (backup[i][j] != 0)           //按键按下时执行动作
 135   4                      {
 136   5                          KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
 137   5                      }
 138   4                      backup[i][j] = KeySta[i][j];     //刷新前一次的备份值
 139   4                  }
 140   3              }
 141   2          }
 142   1      }
 143          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔1ms */
 144          void KeyScan()
 145          {
 146   1          unsigned char i;
 147   1          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
 148   1          static unsigned char keybuf[4][4] = {  //矩阵按键扫描缓冲区
 149   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
 150   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
 151   1          };
 152   1      
 153   1          //将一行的4个按键值移入缓冲区
 154   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
 155   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 156   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 157   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 158   1          //消抖后更新按键状态
 159   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
 160   1          {
 161   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
 162   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
 163   3                  KeySta[keyout][i] = 0;
 164   3                              KeyDownTime[keyout][i]+=4;
 165   3              }
 166   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
 167   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
 168   3                  KeySta[keyout][i] = 1;
 169   3                              KeyDownTime[keyout][i]+=4;
 170   3              }
 171   2          }
 172   1          //执行下一次的扫描输出
 173   1          keyout++;                //输出索引递增
 174   1          keyout = keyout & 0x03;  //索引值加到4即归零
 175   1          switch (keyout)          //根据索引，释放当前输出引脚，拉低下次的输出引脚
 176   1          {
 177   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 178   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 16:28:46 PAGE 4   

 179   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 180   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 181   2              default: break;
 182   2          }
 183   1      }
 184          
 185          /* 配置并启动 T0，ms-T0 定时时间 */
 186          void ConfigTimer0(unsigned int ms)
 187          {
 188   1          unsigned long tmp; //临时变量
 189   1          tmp = 11059200 / 12; //定时器计数频率
 190   1          tmp = (tmp * ms) / 1000; //计算所需的计数值
 191   1          tmp = 65536 - tmp; //计算定时器重载值
 192   1          tmp = tmp + 33; //补偿中断响应延时造成的误差
 193   1          T0RH = (unsigned char)(tmp>>8); //定时器重载值拆分为高低字节
 194   1          T0RL = (unsigned char)tmp;
 195   1          TMOD &= 0xF0; //清零 T0 的控制位
 196   1          TMOD |= 0x01; //配置 T0 为模式 1
 197   1          TH0 = T0RH; //加载 T0 重载值
 198   1          TL0 = T0RL;
 199   1          ET0 = 1; //使能 T0 中断
 200   1          TR0 = 1; //启动 T0
 201   1      }
 202          
 203          
 204          /* T0中断服务函数，用于数码管显示扫描与按键扫描 */
 205          void InterruptTimer0() interrupt 1
 206          {
 207   1          TH0 = 0xFC; 
 208   1          TL0 = 0x67;
 209   1          KeyScan();   //调用按键扫描函数
 210   1              if(flagBuzzon)    //执行蜂鸣器鸣叫或关闭
 211   1              Buzz=~Buzz;
 212   1              else
 213   1                  Buzz=1;
 214   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    675    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     64    ----
   DATA SIZE        =     57       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
