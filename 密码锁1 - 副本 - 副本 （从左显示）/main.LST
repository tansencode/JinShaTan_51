C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          *******************************************************************************
   3          * 1、用0～9的数字键输入密码，允许的密码最大位数由PSW_MAX_LEN宏定义给出
   4          * 2、用户设定的密码由EEPROM保存，并且用“累加和”校验来保证数据的有效性
   5          * 3、程序首次运行时EEPROM中的数据无效，此时会提示“设置密码”
   6          * 4、设置密码时需要用户输入两次相同的密码，以保证设置成功，设置后密码自动保存
   7          * 5、两次输入密码不相同时，将导致密码设置失败，按回车键重新设置
   8          * 6、密码设置成功后，每次开机都会要求用户输入密码，用户键入密码后，按回车键，
   9               系统将键入的密码与EEPROM中保存的密码做对比，相同则系统解锁，否则继续锁定
  10          * 7、密码输入错误系统锁定时，按回车键可以重新开始输入密码
  11          * 8、密码输入正确系统解锁时，按回车键可以进入修改密码的操作
  12          * 9、当忘记密码时，可通过修改PSW_MAX_LEN或PSW_SAVE_ADDR宏定义的值来重置密码
  13          *******************************************************************************
  14          */
  15          
  16          #include <reg52.h>
  17          
  18          #define PSW_MAX_LEN    6    //用宏定义出密码最大长度（最大不超过16）
  19          #define PSW_SAVE_ADDR  0x20  //用宏定义出密码在EEPROM中的保存地址
  20          
  21          sbit ADDR0 = P1^0;
  22          sbit ADDR1 = P1^1;
  23          sbit ADDR2 = P1^2;
  24          sbit ADDR3 = P1^3;
  25          sbit ENLED = P1^4;
  26          
  27          sbit MC0 = P3^0;
  28          sbit MC1 = P3^1;
  29          sbit MC2 = P3^2;
  30          sbit MC3 = P3^3;
  31          
  32          unsigned char code LedChar[] = { //数码管显示字符转换表
  33          0x89, 0x89, 0x89, 0x89, 0x89,0x89,0x89, 0x89,
  34          0x89, 0x89, 0xFF, 0x7F, 0xBF, 0xCF, 0xDF, 0xEF
  35          };
  36          unsigned char LedBuff[7] = { //数码管显示缓冲区
  37          0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,0xFF
  38          };
  39          
  40          signed long beats = 0; //电机转动节拍总数
  41          unsigned char status;  //系统状态字：0-输入密码，1-设置密码，2-设置密码确认，
  42                                 //3-密码设置失败，4-输入的密码正确，5-输入的密码错误
  43          static unsigned long num=0; //用于保存输入的数
  44          unsigned char PswCnt;  //当前输入密码位数的计数器
  45          unsigned char pdata PswSet[PSW_MAX_LEN];   //已设定的密码数据
  46          unsigned char pdata PswBuf1[PSW_MAX_LEN];  //密码输入缓冲区1
  47          unsigned char pdata PswBuf2[PSW_MAX_LEN];  //密码输入缓冲区2
  48          
  49          unsigned char T0RH = 0;  //T0重载值的高字节
  50          unsigned char T0RL = 0;  //T0重载值的低字节
  51          
  52          static unsigned char j ; //动态扫描的索引
  53          static unsigned int n=5;   //数码管显示位索引
  54          void ledon();
  55          extern void KeyScan();
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 2   

  56          extern void KeyDriver();
  57          extern void E2Read(unsigned char *buf, unsigned char addr, unsigned char len);
  58          extern void E2Write(unsigned char *buf, unsigned char addr, unsigned char len);
  59          
  60          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len);
  61          void ConfigTimer0(unsigned int ms);
  62          //void ShowNumber(unsigned long num);
  63          bit  ReadPassword();
  64          
  65          /* 数码管上显示一位数字，index-数码管位索引(从右到左对应0～5)，
  66          **     num-待显示的数字，point-代表是否显示此位上的小数点 */
  67          void ShowLedNumber(unsigned int index, unsigned int num,unsigned int point)
  68          {
  69   1         P0=0xFF;
  70   1         LedBuff[index] = LedChar[num];  //输入数字转换为数码管字符0～F
  71   1          if (point != 0)
  72   1          {
  73   2             LedBuff[index] &= 0x7F;  //point不为0时点亮当前位的小数点
  74   2          }
  75   1      }
  76          
  77          void main()
  78          {
  79   1          EA = 1;           //开总中断
  80   1              ENLED = 0; //选择数码管进行显示
  81   1          ADDR3 = 1;
  82   1                      
  83   1              TMOD = 0x01; //设置 T0 为模式 1
  84   1          TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  85   1          TL0 = 0x67;
  86   1          ET0 = 1; //使能 T0 中断
  87   1          TR0 = 1; //启动 T0
  88   1          ConfigTimer0(1);  //配置T0定时1ms
  89   1              LedBuff[0] = LedChar[10]; //上电无显示，等待输入密码
  90   1          InitLcd1602();    //初始化液晶
*** WARNING C206 IN LINE 90 OF MAIN.C: 'InitLcd1602': missing function-prototype
  91   1          if (ReadPassword())  //读取密码并判断是否有效
  92   1          {
  93   2                  //j=2;
  94   2                      n=5;
  95   2                      LedBuff[6]=LedChar[13];
  96   2              status = 0;     
  97   2          }
  98   1          else
  99   1          {
 100   2                  //j=0;
 101   2                      n=5;
 102   2                      LedBuff[6]=LedChar[11];
 103   2              status = 1;
 104   2          }
 105   1          FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 106   1          FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 107   1          PswCnt = 0;
 108   1          while (1)
 109   1          {
 110   2              KeyDriver();
 111   2          }
 112   1      }
 113          
 114          /* 步进电机启动函数，angle-需转过的角度 */
 115          void StartMotor(signed long angle)
 116          {
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 3   

 117   1        //在计算前关闭中断，完成后再打开，以避免中断打断计算过程而造成错误
 118   1        EA = 0;
 119   1        beats = (angle * 4076)/360 ; //实测为 4076 拍转动一圈
 120   1        EA = 1;
 121   1      }
 122          /* 步进电机停止函数 */
 123          void StopMotor()
 124          {
 125   1         EA = 0;
 126   1         beats = 0;
 127   1         EA = 1;
 128   1      }
 129          
 130          
 131          /* 将一段内存数据拷贝到另一处，dest-目的地址，src-源地址，len-数据长度 */
 132          void CopyMemory(unsigned char *dest, unsigned char *src, unsigned char len)
 133          {
 134   1          while (len--)
 135   1          {
 136   2              *dest++ = *src++;
 137   2          }
 138   1      }
 139          /* 用一个指定字节填充一段内存，dest-目的地址，byt-填充用字节，len-数据长度 */
 140          void FillMemory(unsigned char *dest, unsigned char byt, unsigned char len)
 141          {
 142   1          while (len--)
 143   1          {
 144   2              *dest++ = byt;
 145   2          }
 146   1      }
 147          /* 内存比较函数，比较两个指针所指向的内存数据是否相同，
 148             ptr1-待比较指针1，ptr2-待比较指针2，len-待比较长度
 149             返回值-两段内存数据完全相同时返回1，不同返回0 */
 150          bit CmpMemory(unsigned char *ptr1, unsigned char *ptr2, unsigned char len)
 151          {
 152   1          while (len--)
 153   1          {
 154   2              if (*ptr1++ != *ptr2++)  //遇到不相等数据时即刻返回0
 155   2              {
 156   3                  return 0;
 157   3              }
 158   2          }
 159   1          return 1;  //比较完全部长度数据都相等则返回1
 160   1      }
 161          /* 将一段数据按字节累加，返回获得的累加和，dat-数据指针，len-数据长度 */
 162          unsigned char GetChkSum(unsigned char *dat, unsigned char len)
 163          {
 164   1          unsigned char sum = 0;
 165   1          
 166   1          while (len--)
 167   1          {
 168   2              sum += *dat++;
 169   2          }
 170   1          return sum;
 171   1      }
 172          /* 从EEPROM中读取保存的密码数据，并对密码进行“累加和”校验，
 173             返回值-校验通过返回1，否则返回0 */
 174          bit ReadPassword()
 175          {
 176   1          unsigned char sum;
 177   1          unsigned char buf[PSW_MAX_LEN+1];
 178   1          
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 4   

 179   1          E2Read(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //读取密码数据和校验字节
 180   1          sum = GetChkSum(buf, PSW_MAX_LEN); //计算密码数据的累加和
 181   1          if (buf[PSW_MAX_LEN] == ~sum)      //校验通过，即密码有效时，拷贝密码
 182   1          {
 183   2              CopyMemory(PswSet, buf, PSW_MAX_LEN);
 184   2              return 1;
 185   2          }
 186   1          else  //密码数据无效时，缓冲区默认成全0
 187   1          {
 188   2              FillMemory(PswSet, '\0', PSW_MAX_LEN);
 189   2              return 0;
 190   2          }
 191   1      }
 192          /* 将当前的密码数据保存到EEPROM中，同时添加校验字节 */
 193          void SavePassword()
 194          {
 195   1          unsigned char buf[PSW_MAX_LEN+1];
 196   1          
 197   1          CopyMemory(buf, PswSet, PSW_MAX_LEN);  //复制密码数据到缓冲区中
 198   1          buf[PSW_MAX_LEN] = ~GetChkSum(buf, PSW_MAX_LEN);  //填充最后的累加和校验字节
 199   1          E2Write(buf, PSW_SAVE_ADDR, PSW_MAX_LEN+1);  //将密码数据保存到EEPROM中
 200   1      }
 201          /* 在液晶上显示与当前输入密码位数相同的*，以指示当前输入的密码位数 */
 202          void ShowPswCnt()
 203          {
 204   1          unsigned char buf[PSW_MAX_LEN+1];
 205   1          
 206   1          FillMemory(buf, '*', PswCnt);
 207   1          FillMemory(buf+PswCnt, '\0', sizeof(buf)-PswCnt);
 208   1        //  LcdShowStr(0, 1, buf);
 209   1      }
 210          /* 数字键动作函数，keycode-数字按键的ASCII值 */
 211          void KeyNumAction(unsigned char keycode)
 212          {
 213   1          switch (status)
 214   1          {
 215   2              case 0: //输入密码状态时，将输入字符填充到PswBuf1
 216   2                  if (PswCnt < PSW_MAX_LEN)
 217   2                  {
 218   3                      PswBuf1[PswCnt] = keycode;
 219   3                      PswCnt++;
 220   3                      ShowPswCnt();
 221   3                  }
 222   2                  break;
 223   2              case 1: //设置密码状态时，将输入字符填充到PswBuf1
 224   2                  if (PswCnt < PSW_MAX_LEN)
 225   2                  {
 226   3                      PswBuf1[PswCnt] = keycode;
 227   3                      PswCnt++;
 228   3                      ShowPswCnt();
 229   3                  }
 230   2                  break;
 231   2              case 2: //设置密码确认状态时，将输入字符填充到PswBuf2
 232   2                  if (PswCnt < PSW_MAX_LEN)
 233   2                  {
 234   3                      PswBuf2[PswCnt] = keycode;
 235   3                      PswCnt++;
 236   3                      ShowPswCnt();
 237   3                  }
 238   2                  break;
 239   2              default: //其它状态不予响应
 240   2                  break;
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 5   

 241   2          }
 242   1      }
 243          
 244          /* 将一个无符号长整型的数字显示到数码管上，num-待显示数字 */
 245          /*void ShowNumber(unsigned long num)
 246          {
 247              signed char i;
 248              unsigned char buf[6];
 249              for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
 250              {
 251                 buf[i] = num % 10;
 252                 num = num / 10;
 253              }
 254              for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
 255              {
 256                if (buf[i] == 0)
 257                LedBuff[i] = 0xFF;
 258                else
 259                break;
 260               }
 261               for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
 262               {
 263                  LedBuff[i] = LedChar[buf[i]];
 264               }
 265          }*/
 266          /* 数码管动态扫描刷新函数，需在定时中断中调用 */
 267          void LedScan()
 268          {
 269   1          static unsigned char i = 0; //动态扫描的索引
 270   1          P0 = 0xFF; //显示消隐
 271   1          P1=(P1&0xF8)|i;
 272   1              P0=LedBuff[i];
 273   1              if(i<6)
 274   1                 i++;
 275   1              else
 276   1                 i=0;
 277   1      }
 278          
 279          /*void LedScan1()        //led提示设置密码
 280          {
 281             static unsigned char i = 0; //动态扫描的索引
 282             P0 = 0xFF; //显示消隐
 283            switch (i)
 284            {
 285              case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 286              case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 287              case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 288              case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 289                  case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 290                  case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 291                  case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0x7F; break;
 292                  default: break;
 293            }
 294          }          */
 295          
 296          /*void LedScan2()                        //led提示再次输入验证密码
 297          {
 298               static unsigned char i = 0; //动态扫描的索引
 299               P0 = 0xFF; //显示消隐
 300               switch (i)
 301               {
 302                   case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 6   

 303                   case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 304                   case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 305                   case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 306                           case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 307                           case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 308                           case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xBF; break;
 309                           default: break;
 310               }
 311          } */
 312          /*void LedScan3()         //led提示输入密码
 313          {
 314               static unsigned char i = 0; //动态扫描的索引
 315               static unsigned int n; //动态扫描的索引
 316               P0 = 0xFF; //显示消隐
 317               switch (i)
 318               {
 319                   case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 320                   case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 321                   case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 322                   case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 323                   case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 324                   case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 325                   case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xCF; break;
 326                   default: break;
 327               }
 328          }       */
 329          
 330          /*void LedScan4()         //密码输入正确提示
 331          {
 332              static unsigned char i = 0; //动态扫描的索引
 333              P0 = 0xFF; //显示消隐
 334              switch (i)
 335              {
 336                 case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 337                 case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 338                 case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 339                 case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 340                 case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 341                 case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 342                 case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xDF; break;
 343                 default: break;
 344              }
 345          }        */
 346          /*void LedScan5()                                        //密码输入错误提示
 347          {
 348              static unsigned char i = 0; //动态扫描的索引
 349              P0 = 0xFF; //显示消隐
 350              switch (i)
 351              {
 352                  case 0: ADDR2=0; ADDR1=0; ADDR0=0; i++; P0=LedBuff[0]; break;
 353                  case 1: ADDR2=0; ADDR1=0; ADDR0=1; i++; P0=LedBuff[1]; break;
 354                  case 2: ADDR2=0; ADDR1=1; ADDR0=0; i++; P0=LedBuff[2]; break;
 355                  case 3: ADDR2=0; ADDR1=1; ADDR0=1; i++; P0=LedBuff[3]; break;
 356                  case 4: ADDR2=1; ADDR1=0; ADDR0=0; i++; P0=LedBuff[4]; break;
 357                  case 5: ADDR2=1; ADDR1=0; ADDR0=1; i++; P0=LedBuff[5]; break;
 358                  case 6: ADDR2=1; ADDR1=1; ADDR0=0; i=0; P0=0xEF; break;
 359                  default: break;
 360              }
 361          }         */
 362          
 363          void ShowNumber1(unsigned long num)     //数码管无显示等待输入密码
 364          {
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 7   

 365   1          signed char i;
 366   1          unsigned char buf[6];
 367   1          for (i=0; i<6; i++) //把长整型数转换为 6 位十进制的数组
 368   1          {
 369   2             buf[i] = num % 10;
 370   2             num = num / 10;
 371   2          }
 372   1          for (i=5; i>=1; i--) //从最高位起，遇到 0 转换为空格，遇到非 0 则退出循环
 373   1          {
 374   2             if (buf[i] == 0)
 375   2             LedBuff[i] = 0xFF;
 376   2             else
 377   2             LedBuff[i] = 0xFF;
 378   2              }
 379   1          for ( ; i>=0; i--) //剩余低位都如实转换为数码管显示字符
 380   1          {
 381   2              LedBuff[i] =0xFF; 
 382   2           } 
 383   1      }
 384          /* 回车键动作函数 */
 385          void KeyEnterAction()
 386          {
 387   1          
 388   1          switch (status)
 389   1          {
 390   2              case 0: //检查输入的密码是否正确
 391   2                  //LcdClearScreen();
 392   2                  if (CmpMemory(PswSet, PswBuf1, PSW_MAX_LEN))
 393   2                  {   //正确时显示解锁的提示
 394   3                                      StartMotor(90);
 395   3                                      //j=3;
 396   3                                      n=5;
 397   3                                      LedBuff[6]=LedChar[14];
 398   3                      status = 4;  //进入解锁状态
 399   3                  }
 400   2                  else
 401   2                  {   //错误时显示已锁定的提示
 402   3                                      StartMotor(-90);
 403   3                                      //j=4;
 404   3                                      n=5;
 405   3                                      LedBuff[6]=LedChar[15];
 406   3                      status = 5;  //进入锁定状态
 407   3                  }
 408   2                  break;
 409   2              case 1: //进入密码设置的确认步骤，即再输入一次密码
 410   2                          num=0;
 411   2                          ShowNumber1(num);
 412   2                          //j=1;
 413   2                              n=5;
 414   2                              LedBuff[6]=LedChar[12];
 415   2                  PswCnt = 0;
 416   2                  status = 2;
 417   2                  break;
 418   2              case 2: //检查两次输入的密码是否一致
 419   2                  if (CmpMemory(PswBuf1, PswBuf2, PSW_MAX_LEN))
 420   2                  {   //一致时保存设置的密码
 421   3                                      num=0;
 422   3                              ShowNumber1(num);
 423   3                      CopyMemory(PswSet, PswBuf1, PSW_MAX_LEN);
 424   3                      SavePassword();
 425   3                      FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 426   3                                      //j=2;
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 8   

 427   3                                      n=5;
 428   3                                      LedBuff[6]=LedChar[13];
 429   3                      PswCnt = 0;
 430   3                      status = 0;  //进入密码输入状态
 431   3                  }
 432   2                  else
 433   2                  {   //不一致时提示密码设置失败
 434   3                      num=0;
 435   3                              ShowNumber1(num);
 436   3                                  //j=1;
 437   3                                      n=5;
 438   3                                      LedBuff[6]=LedChar[12];
 439   3                      status = 3;  //进入密码设置失败状态
 440   3                  }
 441   2                  break;
 442   2              case 3: //重新提示设置密码，进入密码设置状态
 443   2                          num=0;
 444   2                          ShowNumber1(num);
 445   2                          //j=0;
 446   2                              n=5;
 447   2                              LedBuff[6]=LedChar[11];
 448   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 449   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 450   2                  PswCnt = 0;
 451   2                  status = 1;
 452   2                  break;
 453   2              case 4: //重新设置即修改密码
 454   2                          num=0;
 455   2                          ShowNumber1(num);
 456   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 457   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 458   2                              //j=0;
 459   2                              n=5;
 460   2                              LedBuff[6]=LedChar[11];
 461   2                  PswCnt = 0;
 462   2                  status = 1;
 463   2                  break;
 464   2              case 5: //重新输入密码
 465   2                         num=0;
 466   2                         ShowNumber1(num);
 467   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 468   2                              //j=2;
 469   2                              n=5;
 470   2                              LedBuff[6]=LedChar[13];
 471   2                  PswCnt = 0;
 472   2                  status = 0;
 473   2                  break;
 474   2              default: //不予响应
 475   2                  break;
 476   2          }
 477   1      }
 478          /* Esc键动作函数 */
 479          void KeyEscAction()
 480          {
 481   1           static unsigned char i = 0; //动态扫描的索引
 482   1          switch (status)
 483   1          {
 484   2              case 0: //输入密码状态时，清空当前输入以重新开始
 485   2                          num=0;
 486   2                              ShowNumber1(num);
 487   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 488   2                              //j=2;
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 9   

 489   2                              n=5;
 490   2                              LedBuff[6]=LedChar[13];
 491   2                  PswCnt = 0;
 492   2                  break;
 493   2              case 1: //设置密码状态时，清空当前输入以重新开始
 494   2                      num=0;
 495   2                              ShowNumber1(num);
 496   2                          //j=0;
 497   2                              n=5;
 498   2                              LedBuff[6]=LedChar[11];
 499   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 500   2                  PswCnt = 0;
 501   2                  break;
 502   2              case 2: //设置密码确认状态时，清空输入并返回密码设置
 503   2                          num=0;
 504   2                              ShowNumber1(num);
 505   2                  FillMemory(PswBuf1, '\0', PSW_MAX_LEN);
 506   2                  FillMemory(PswBuf2, '\0', PSW_MAX_LEN);
 507   2                              //j=0;
 508   2                              n=5;
 509   2                              LedBuff[6]=LedChar[11];
 510   2                  PswCnt = 0;
 511   2                  status = 1;
 512   2                  break;
 513   2              default: //其它状态不予响应
 514   2                  break;
 515   2          }
 516   1      }
*** WARNING C280 IN LINE 481 OF MAIN.C: 'i': unreferenced local variable
 517          
 518          /* 电机转动控制函数 */
 519          void TurnMotor()
 520          {
 521   1      unsigned char tmp; //临时变量
 522   1      static unsigned char index = 0; //节拍输出索引
 523   1      unsigned char code BeatCode[8] = { //步进电机节拍对应的 IO 控制代码
 524   1      0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 525   1      };
 526   1      if (beats != 0) //节拍数不为 0 则产生一个驱动节拍
 527   1      {
 528   2      if (beats > 0) //节拍数大于 0 时正转
 529   2      {
 530   3      index++; //正转时节拍输出索引递增
 531   3      index = index & 0x07; //用&操作实现到 8 归零
 532   3      beats--; //正转时节拍计数递减
 533   3      }
 534   2      else //节拍数小于 0 时反转
 535   2      {
 536   3      index--; //反转时节拍输出索引递减
 537   3      index = index & 0x07; //用&操作同样可以实现到-1 时归 7
 538   3      beats++; //反转时节拍计数递增
 539   3      }
 540   2      tmp = P3; //用 tmp 把 P1 口当前值暂存
 541   2      tmp = tmp & 0xF0; //用&操作清零低 4 位
 542   2      tmp = tmp | BeatCode[index]; //用|操作把节拍代码写到低 4 位
 543   2      P3= tmp; //把低 4 位的节拍代码和高 4 位的原值送回 P1
 544   2      }
 545   1      else //节拍数为 0 则关闭电机所有的相
 546   1      {
 547   2      P3 = P3 | 0x0F;
 548   2      }
 549   1      }
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 10  

 550          
 551          
 552          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 553          void KeyAction(unsigned char keycode)
 554          {
 555   1          if  ((keycode>='0') && (keycode<='9'))  //输入字符
 556   1          {
 557   2              KeyNumAction(keycode);
 558   2                      num = (keycode-0x30); //整体十进制左移，新数字进入个位
 559   2              switch(n)
 560   2                        {
 561   3                        case 5:
 562   3                      ShowLedNumber(5,num,0); //运算结果显示到数码管 
 563   3                              n--;
 564   3                              num=0;
 565   3                              break;
 566   3                              case 4:
 567   3                              ShowLedNumber(4,num,0); //运算结果显示到数码管 
 568   3                              n--;
 569   3                              num=0;
 570   3                              break;
 571   3                              case 3:
 572   3                              ShowLedNumber(3,num,0); //运算结果显示到数码管 
 573   3                              n--;
 574   3                              num=0;
 575   3                              break;
 576   3                              case 2:
 577   3                              ShowLedNumber(2,num,0); //运算结果显示到数码管 
 578   3                              n--;
 579   3                              num=0;
 580   3                              break;
 581   3                              case 1:
 582   3                              ShowLedNumber(1,num,0); //运算结果显示到数码管 
 583   3                              n--;
 584   3                              break;
 585   3                              case 0:
 586   3                              ShowLedNumber(0,num,0); //运算结果显示到数码管 
 587   3                              n=5;
 588   3                              num=0;
 589   3                              break;
 590   3                              default:
 591   3                              num=0;
 592   3                              break;
 593   3                              }
 594   2      
 595   2            
 596   2          }
 597   1          else if (keycode == 0x0D)  //回车键
 598   1          {
 599   2                  
 600   2              KeyEnterAction();
 601   2          }
 602   1          else if (keycode == 0x1B)  //Esc键
 603   1          {
 604   2              KeyEscAction();
 605   2          }
 606   1      }
 607          /* 配置并启动T0，ms-T0定时时间 */
 608          void ConfigTimer0(unsigned int ms)
 609          {
 610   1          unsigned long tmp;  //临时变量
 611   1          
C51 COMPILER V9.01   MAIN                                                                  05/15/2018 20:31:39 PAGE 11  

 612   1          tmp = 11059200 / 12;      //定时器计数频率
 613   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 614   1          tmp = 65536 - tmp;        //计算定时器重载值
 615   1          tmp = tmp + 28;           //补偿中断响应延时造成的误差
 616   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 617   1          T0RL = (unsigned char)tmp;
 618   1          TMOD &= 0xF0;   //清零T0的控制位
 619   1          TMOD |= 0x01;   //配置T0为模式1
 620   1          TH0 = T0RH;     //加载T0重载值
 621   1          TL0 = T0RL;
 622   1          ET0 = 1;        //使能T0中断
 623   1          TR0 = 1;        //启动T0
 624   1      }
 625          /* T0中断服务函数，执行按键扫描 */
 626          void InterruptTimer0() interrupt 1
 627          {
 628   1          static bit div=0;
 629   1              static int n=90000;
 630   1          TH0 = T0RH;  //重新加载重载值
 631   1          TL0 = T0RL;
 632   1              LedScan(); //调用数码管显示扫描函数
 633   1          KeyScan();   //按键扫描
 634   1      /*      switch(j)
 635   1              {
 636   1                 case 0:
 637   1             
 638   1                 LedScan1();
 639   1              break;
 640   1            case 1:
 641   1          
 642   1                 LedScan2();
 643   1                      break;
 644   1             case 2:
 645   1                LedScan3();
 646   1                      break;
 647   1                      case 3:
 648   1                 LedScan4();
 649   1                      break;
 650   1              case 4:
 651   1                 LedScan5();
 652   1                      break;
 653   1                      default:break;
 654   1                      }  */
 655   1              div = ~div;
 656   1         if (div == 1)
 657   1         {
 658   2            TurnMotor();
 659   2         }
 660   1      }
*** WARNING C280 IN LINE 629 OF MAIN.C: 'n': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1650    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     18    ----
   DATA SIZE        =     27      65
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
