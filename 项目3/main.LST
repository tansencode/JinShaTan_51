C51 COMPILER V9.01   MAIN                                                                  06/07/2018 17:25:18 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          sbit ADDR0 = P1^0;      //定义led使能端及位选端
   4          sbit ADDR1 = P1^1;
   5          sbit ADDR2 = P1^2;
   6          sbit ADDR3 = P1^3;
   7          sbit ENLED = P1^4;
   8          
   9          sbit Buzz=P1^6;   //蜂鸣器控制引脚
  10          bit flagBuzzon=0;
  11          sbit KEY_IN_1  = P2^4;  //按键控制引脚
  12          sbit KEY_IN_2  = P2^5;
  13          sbit KEY_IN_3  = P2^6;
  14          sbit KEY_IN_4  = P2^7;
  15          sbit KEY_OUT_1 = P2^3;
  16          sbit KEY_OUT_2 = P2^2;
  17          sbit KEY_OUT_3 = P2^1;
  18          sbit KEY_OUT_4 = P2^0;
  19          
  20          
  21          bit flag300ms = 1;  //200ms定时标志
  22          
  23          typedef unsigned int u16;         //对数据类型进行声明定义
  24          typedef unsigned char u8;
  25          unsigned char i=0;
  26          unsigned int j=0;
  27          static unsigned int cnt=0;
  28          unsigned char T0RH=0;
  29          unsigned char T0RL=0;
  30          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
  31          
  32          void ConfigTimer0(unsigned int ms);
  33          extern void UartDriver();
  34          extern void ConfigUART(unsigned int baud);
  35          extern void UartRxMonitor(unsigned char ms);
  36          extern void UartRead(unsigned char *buf, unsigned char len);
  37          extern void UartWrite(unsigned char *buf, unsigned char len);
  38          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  39              { 0x31, 0x32, 0x33, 0x26 }, //数字键1、数字键2、数字键3、向上键
  40              { 0x34, 0x35, 0x36, 0x25 }, //数字键4、数字键5、数字键6、向左键
  41              { 0x37, 0x38, 0x39, 0x28 }, //数字键7、数字键8、数字键9、向下键
  42              { 0x30, 0x1B, 0x0D, 0x27 }  //数字键0、ESC键、  回车键、 向右键
  43          };
  44          unsigned char KeySta[4][4] = {  //全部矩阵按键的当前状态
  45              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
  46          };
  47          
  48          unsigned long pdata KeyDownTime[4][4] = {  //每个按键按下的持续时间，单位ms
  49              {0, 0, 0, 0},  {0, 0, 0, 0},  {0, 0, 0, 0},  {0, 0, 0, 0}
  50          };
  51          //unsigned char i, j;
  52          void KeyDriver();
  53          
  54          void main()
  55          {
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 17:25:18 PAGE 2   

  56   1          unsigned char psec=0xAA;  
  57   1          EA = 1;       //使能总中断
  58   1              TMOD = 0x01; //设置 T0 为模式 1
  59   1          TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  60   1          TL0 = 0x67;
  61   1          ET0 = 1; //使能 T0 中断
  62   1          TR0 = 1; //启动 T0
  63   1              ConfigTimer0(1); //配置 T0 定时 1ms
  64   1          ConfigUART(9600); //配置波特率为 9600
  65   1              InitDS1302();     //初始化实时时钟
*** WARNING C206 IN LINE 65 OF MAIN.C: 'InitDS1302': missing function-prototype
  66   1          while (1)
  67   1          {
  68   2              KeyDriver();   //调用按键驱动函数
  69   2                      //UartDriver(); //调用串口驱动
  70   2                      UartWrite(KeyDownTime,10);
*** WARNING C182 IN LINE 70 OF MAIN.C: pointer to different objects
  71   2          }
  72   1      }
  73          
  74          void ledon()            //LED亮与灭控制函数
  75          {
  76   1          EA = 1;       //使能总中断
  77   1          ENLED = 0;    
  78   1          ADDR3 = 1;
  79   1              ADDR2=1;
  80   1              ADDR1=1;
  81   1              ADDR0=0;
  82   1              switch(i)
  83   1              {
  84   2                   case 0:P0=0xfe;i++;break;
  85   2                       case 1:P0=0xff;i=0;break;
  86   2                       default:break;
  87   2              }
  88   1      
  89   1      }
  90          
  91          
  92          void delay(u16 j)
  93          {
  94   1              while(j--);     
  95   1      }
  96          
  97          void buzz()       //蜂鸣器启动和停止控制函数
  98          {
  99   1          unsigned int cnt=0;
 100   1              switch(cnt)
 101   1              {
 102   2             case 0:
 103   2                 flagBuzzon=1;  //蜂鸣器开启
 104   2                       ++cnt;
 105   2                         break;
 106   2                      case 1:
 107   2                        flagBuzzon=0;    //蜂鸣器关闭
 108   2                         cnt=0;
 109   2                         break;
 110   2                       default:break;        
 111   2              }
 112   1      }
 113          
 114          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 115          void KeyAction(unsigned char keycode)
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 17:25:18 PAGE 3   

 116          {
 117   1          // unsigned int cnt=0;
 118   1           if (keycode == 0x31 )  //K1按键控制蜂鸣器启动和停止
 119   1          {  
 120   2                 buzz();
 121   2          }
 122   1          else if (keycode == 0x32 )  //K2按键控制led1亮和灭
 123   1          {
 124   2                      ledon();
 125   2          }
 126   1      }
 127          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 128          void KeyDriver()
 129          {
 130   1         // unsigned char i, j;
 131   1          static unsigned char pdata backup[4][4] = {  //按键值备份，保存前一次的值
 132   1              {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1},  {1, 1, 1, 1}
 133   1          };
 134   1          static unsigned long pdata TimeThr[4][4] = {  //快速输入执行的时间阈值
 135   1              {1000, 1000, 1000, 1000},  {1000, 1000, 1000, 1000},
 136   1              {1000, 1000, 1000, 1000},  {1000, 1000, 1000, 1000}
 137   1          };
 138   1          
 139   1          for (i=0; i<4; i++)  //循环扫描4*4的矩阵按键
 140   1          {
 141   2              for (j=0; j<4; j++)
 142   2              {
 143   3                  if (backup[i][j] != KeySta[i][j])     //检测按键动作
 144   3                  {
 145   4                      if (backup[i][j] != 0)            //按键按下时执行动作
 146   4                      {
 147   5                          KeyAction(KeyCodeMap[i][j]);  //调用按键动作函数
 148   5                      }
 149   4                      backup[i][j] = KeySta[i][j];      //刷新前一次的备份值
 150   4                  }
 151   3                  if (KeyDownTime[i][j] > 0)            //检测执行快速输入
 152   3                  {
 153   4                      if (KeyDownTime[i][j] >= TimeThr[i][j])
 154   4                      {                                 //达到阈值时执行一次动作
 155   5                          KeyAction(KeyCodeMap[i][j]);  //调用按键动作函数
 156   5                          TimeThr[i][j] += 200; //时间阈值增加200ms，以准备下次执行
 157   5                      }
 158   4                  }
 159   3                  else   //按键弹起时复位阈值时间
 160   3                  {
 161   4                      TimeThr[i][j] = 1000;  //恢复1s的初始阈值时间
 162   4                  }
 163   3              }
 164   2          }
 165   1      }
 166          /* 按键扫描函数，需在定时中断中调用 */
 167          void KeyScan()
 168          {
 169   1          unsigned char i;
 170   1          static unsigned char keyout = 0;   //矩阵按键扫描输出索引
 171   1          static unsigned char keybuf[4][4] = {  //矩阵按键扫描缓冲区
 172   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF},
 173   1              {0xFF, 0xFF, 0xFF, 0xFF},  {0xFF, 0xFF, 0xFF, 0xFF}
 174   1          };
 175   1      
 176   1          //将一行的4个按键值移入缓冲区
 177   1          keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 17:25:18 PAGE 4   

 178   1          keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 179   1          keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 180   1          keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 181   1          //消抖后更新按键状态
 182   1          for (i=0; i<4; i++)  //每行4个按键，所以循环4次
 183   1          {
 184   2              if ((keybuf[keyout][i] & 0x0F) == 0x00)
 185   2              {   //连续4次扫描值为0，即4*4ms内都是按下状态时，可认为按键已稳定的按下
 186   3                  KeySta[keyout][i] = 0;
 187   3                  KeyDownTime[keyout][i] += 4;  //按下的持续时间累加
 188   3                              //UartWrite(KeyDownTime[keyout][i],10);
 189   3                      //      SBUF =KeyDownTime[keyout][i] ;//将接收到的数据放入到发送寄存器
 190   3                    //  while (!TI);                           //等待发送数据完成
 191   3                   //   TI = 0;
 192   3              }
 193   2              else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
 194   2              {   //连续4次扫描值为1，即4*4ms内都是弹起状态时，可认为按键已稳定的弹起
 195   3                  KeySta[keyout][i] = 1;
 196   3                  KeyDownTime[keyout][i] = 0;   //按下的持续时间清零
 197   3              }
 198   2          }
 199   1          //执行下一次的扫描输出
 200   1          keyout++;        //输出索引递增
 201   1          keyout &= 0x03;  //索引值加到4即归零
 202   1          switch (keyout)  //根据索引，释放当前输出引脚，拉低下次的输出引脚
 203   1          {
 204   2              case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 205   2              case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
 206   2              case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 207   2              case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 208   2              default: break;
 209   2          }
 210   1      }
 211          
 212          /* 配置并启动 T0，ms-T0 定时时间 */
 213          void ConfigTimer0(unsigned int ms)
 214          {
 215   1          unsigned long tmp; //临时变量
 216   1          tmp = 11059200 / 12; //定时器计数频率
 217   1          tmp = (tmp * ms) / 1000; //计算所需的计数值
 218   1          tmp = 65536 - tmp; //计算定时器重载值
 219   1          tmp = tmp + 33; //补偿中断响应延时造成的误差
 220   1          T0RH = (unsigned char)(tmp>>8); //定时器重载值拆分为高低字节
 221   1          T0RL = (unsigned char)tmp;
 222   1          TMOD &= 0xF0; //清零 T0 的控制位
 223   1          TMOD |= 0x01; //配置 T0 为模式 1
 224   1          TH0 = T0RH; //加载 T0 重载值
 225   1          TL0 = T0RL;
 226   1          ET0 = 1; //使能 T0 中断
 227   1          TR0 = 1; //启动 T0
 228   1      }
 229          
 230          
 231          /* T0中断服务函数，用于数码管显示扫描与按键扫描 */
 232          void InterruptTimer0() interrupt 1
 233          {
 234   1          static unsigned int tmrls=0;
 235   1          TH0 = 0xFC; 
 236   1          TL0 = 0x67;         
 237   1              tmrls++;
 238   1              if(     tmrls>=300)
 239   1              {
C51 COMPILER V9.01   MAIN                                                                  06/07/2018 17:25:18 PAGE 5   

 240   2                 flag300ms=1;
 241   2              }
 242   1      
 243   1          KeyScan();   //调用按键扫描函数
 244   1              if(flagBuzzon)    //执行蜂鸣器鸣叫或关闭
 245   1              Buzz=~Buzz;
 246   1              else
 247   1                  Buzz=1;
 248   1              UartRxMonitor(1);
 249   1      
 250   1      
 251   1      }
 252          /*void InterruptUART() interrupt 4
 253          {
 254                   unsigned char i;
 255                   SBUF = ' ' ;//将接收到的数据放入到发送寄存器
 256                   while (!TI);                            //等待发送数据完成
 257                   TI = 0;
 258                   SBUF = ' ' ;//将接收到的数据放入到发送寄存器
 259                   while (!TI);                            //等待发送数据完成
 260                   TI = 0;
 261                   SBUF =KeyDownTime[keyout][i];//将接收到的数据放入到发送寄存器
 262                   while (!TI);                            //等待发送数据完成
 263                   TI = 0;
 264          }*/      


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    959    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =    144    ----
   DATA SIZE        =     43       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
