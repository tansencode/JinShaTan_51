C51 COMPILER V9.01   MAIN                                                                  04/13/2018 20:05:54 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          sbit KEY_IN_1 = P2^4;      //定义按键IO口地址
   4          sbit KEY_IN_2 = P2^5;
   5          sbit KEY_IN_3 = P2^6;
   6          sbit KEY_IN_4 = P2^7;
   7          sbit KEY_OUT_1 = P2^3;
   8          sbit KEY_OUT_2 = P2^2;
   9          sbit KEY_OUT_3 = P2^1;
  10          sbit KEY_OUT_4 = P2^0;
  11          
  12          unsigned char code KeyCodeMap[4][4] = { //矩阵按键编号到标准键盘键码的映射表
  13          { 0x31, 0x32, 0x33, 0x26 }, //数字键 1、数字键 2、数字键 3、向上键
  14          { 0x34, 0x35, 0x36, 0x25 }, //数字键 4、数字键 5、数字键 6、向左键
  15          { 0x37, 0x38, 0x39, 0x28 }, //数字键 7、数字键 8、数字键 9、向下键
  16          { 0x30, 0x1B, 0x0D, 0x27 } //数字键 0、ESC 键、 回车键、 向右键
  17          };
  18          
  19          unsigned char KeySta[4][4] = { //全部矩阵按键的当前状态
  20          {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
  21          };
  22          
  23          signed long beats = 0; //电机转动节拍总数
  24          void KeyDriver();
  25          
  26          void main()
  27          {
  28   1      EA = 1; //使能总中断
  29   1      TMOD = 0x01; //设置 T0 为模式 1
  30   1      TH0 = 0xFC; //为 T0 赋初值 0xFC67，定时 1ms
  31   1      TL0 = 0x67;
  32   1      ET0 = 1; //使能 T0 中断
  33   1      TR0 = 1; //启动 T0
  34   1      while (1)
  35   1      {
  36   2      KeyDriver(); //调用按键驱动函数
  37   2      }
  38   1      }
  39          
  40          /* 步进电机启动函数，angle-需转过的角度 */
  41          void StartMotor(signed long angle)
  42          {
  43   1      //在计算前关闭中断，完成后再打开，以避免中断打断计算过程而造成错误
  44   1      EA = 0;
  45   1      beats = (angle * 4076)/360 ; //实测为 4076 拍转动一圈
  46   1      EA = 1;
  47   1      }
  48          
  49          /* 步进电机停止函数 */
  50          void StopMotor()
  51          {
  52   1      EA = 0;
  53   1      beats = 0;
  54   1      EA = 1;
  55   1      }
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 20:05:54 PAGE 2   

  56          
  57          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
  58          void KeyAction(unsigned char keycode)
  59          {
  60   1      static bit dirMotor = 0; //电机转动方向
  61   1      static signed long num=0;                 //保存输入的角度值
  62   1      if ((keycode>=0x30) && (keycode<=0x39)) //控制电机转动
  63   1      {
  64   2      num = (num*10)+(keycode-0x30); //整体十进制左移，新数字进入个位
  65   2      }
  66   1      else if(keycode==0x0D)     //按回车键开始转动
  67   1      {
  68   2      if (dirMotor == 0)        //正转
  69   2      {
  70   3      StartMotor(num);
  71   3      num=0;
  72   3      }
  73   2      else
  74   2      {
  75   3      StartMotor(-1*(num));     //反转
  76   3      num=0;
  77   3      }
  78   2      }
  79   1      else if (keycode == 0x26) //向上键，控制转动方向为正转
  80   1      {
  81   2      dirMotor = 0;
  82   2      }
  83   1      else if (keycode == 0x28) //向下键，控制转动方向为反转
  84   1      {
  85   2      dirMotor = 1;
  86   2      }
  87   1      else if (keycode == 0x25) //向左键，固定正转 360 度
  88   1      {
  89   2      StartMotor(360);
  90   2      }
  91   1      else if (keycode == 0x27) //向右键，固定反转 360 度
  92   1      {
  93   2      StartMotor(-360);
  94   2      }
  95   1      else if (keycode == 0x1B) //Esc 键，停止转动
  96   1      {
  97   2      StopMotor();
  98   2      }
  99   1      }
 100          
 101          /* 按键驱动函数，检测按键动作，调度相应动作函数，需在主循环中调用 */
 102          void KeyDriver()
 103          {
 104   1      unsigned char i, j;
 105   1      static unsigned char backup[4][4] = { //按键值备份，保存前一次的值
 106   1      {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}
 107   1      };
 108   1      for (i=0; i<4; i++) //循环检测 4*4 的矩阵按键
 109   1      {
 110   2      for (j=0; j<4; j++)
 111   2      {
 112   3      if (backup[i][j] != KeySta[i][j]) //检测按键动作
 113   3      {
 114   4      if (backup[i][j] != 0) //按键按下时执行动作
 115   4      {
 116   5      KeyAction(KeyCodeMap[i][j]); //调用按键动作函数
 117   5      }
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 20:05:54 PAGE 3   

 118   4      backup[i][j] = KeySta[i][j]; //刷新前一次的备份值
 119   4      }
 120   3      }
 121   2      }
 122   1      }
 123          
 124          /* 按键扫描函数，需在定时中断中调用，推荐调用间隔 1ms */
 125          void KeyScan()
 126          {
 127   1      unsigned char i;
 128   1      static unsigned char keyout = 0; //矩阵按键扫描输出索引
 129   1      static unsigned char keybuf[4][4] = { //矩阵按键扫描缓冲区
 130   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF},
 131   1      {0xFF, 0xFF, 0xFF, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}
 132   1      };
 133   1      //将一行的 4 个按键值移入缓冲区
 134   1      keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
 135   1      keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 136   1      keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 137   1      keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 138   1      //消抖后更新按键状态
 139   1      for (i=0; i<4; i++) //每行 4 个按键，所以循环 4 次
 140   1      {
 141   2      if ((keybuf[keyout][i] & 0x0F) == 0x00)
 142   2      { //连续 4 次扫描值为 0，即 4*4ms 内都是按下状态时，可认为按键已稳定的按下
 143   3      KeySta[keyout][i] = 0;
 144   3      }
 145   2      else if ((keybuf[keyout][i] & 0x0F) == 0x0F)
 146   2      { //连续 4 次扫描值为 1，即 4*4ms 内都是弹起状态时，可认为按键已稳定的弹起
 147   3      KeySta[keyout][i] = 1;
 148   3      }
 149   2      }
 150   1      //执行下一次的扫描输出
 151   1      keyout++; //输出索引递增
 152   1      keyout = keyout & 0x03; //索引值加到 4 即归零
 153   1      switch (keyout) //根据索引，释放当前输出引脚，拉低下次的输出引脚
 154   1      {
 155   2      case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 156   2      case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
 157   2      case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 158   2      case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 159   2      default: break;
 160   2      }
 161   1      }
 162          
 163          /* 电机转动控制函数 */
 164          void TurnMotor()
 165          {
 166   1      unsigned char tmp; //临时变量
 167   1      static unsigned char index = 0; //节拍输出索引
 168   1      unsigned char code BeatCode[8] = { //步进电机节拍对应的 IO 控制代码
 169   1      0xE, 0xC, 0xD, 0x9, 0xB, 0x3, 0x7, 0x6
 170   1      };
 171   1      if (beats != 0) //节拍数不为 0 则产生一个驱动节拍
 172   1      {
 173   2      if (beats > 0) //节拍数大于 0 时正转
 174   2      {
 175   3      index++; //正转时节拍输出索引递增
 176   3      index = index & 0x07; //用&操作实现到 8 归零
 177   3      beats--; //正转时节拍计数递减
 178   3      }
 179   2      else //节拍数小于 0 时反转
C51 COMPILER V9.01   MAIN                                                                  04/13/2018 20:05:54 PAGE 4   

 180   2      {
 181   3      index--; //反转时节拍输出索引递减
 182   3      index = index & 0x07; //用&操作同样可以实现到-1 时归 7
 183   3      beats++; //反转时节拍计数递增
 184   3      }
 185   2      tmp = P1; //用 tmp 把 P1 口当前值暂存
 186   2      tmp = tmp & 0xF0; //用&操作清零低 4 位
 187   2      tmp = tmp | BeatCode[index]; //用|操作把节拍代码写到低 4 位
 188   2      P1 = tmp; //把低 4 位的节拍代码和高 4 位的原值送回 P1
 189   2      }
 190   1      else //节拍数为 0 则关闭电机所有的相
 191   1      {
 192   2      P1 = P1 | 0x0F;
 193   2      }
 194   1      }
 195          
 196          /* T0 中断服务函数，用于按键扫描与电机转动控制 */
 197          void InterruptTimer0() interrupt 1
 198          {
 199   1      static bit div = 0;
 200   1      TH0 = 0xFC; //重新加载初值
 201   1      TL0 = 0x67;
 202   1      KeyScan(); //执行按键扫描
 203   1      //用一个静态 bit 变量实现二分频，即 2ms 定时，用于控制电机
 204   1      div = ~div;
 205   1      if (div == 1)
 206   1      {
 207   2      TurnMotor();
 208   2      }
 209   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    771    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
